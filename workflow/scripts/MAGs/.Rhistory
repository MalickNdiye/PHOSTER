"GB_VCs",)
cols<- brewer.pal(11, "Spectral")
show_col(cols)
col_list<- c("Lactobacillus"=cols[10],
"kunkeei"="lightblue",
"Lactococcus"= cols[4],
"Gamma"=cols[9],
"Bifidobacterium"=cols[8],
"Commensalibacter"="tomato3",
"unclassified"="grey",
"Snodgrassella"=cols[6],
"Gilliamella" =cols[7],
"Bartonella"=cols[3],
"Pseudomonas"=cols[2],
"Apis"=cols[1],
"GB_VCs"="turquoise",
"Frischella"=cols[5])
levs= c("unclassified",
"Lactobacillus",
"kunkeei",
"Bifidobacterium",
"Commensalibacter",
"Snodgrassella",
"Gilliamella",
"Bartonella",
"Frischella",
"Apis",
"GB_VCs",)
levs= c("unclassified",
"Lactobacillus",
"kunkeei",
"Bifidobacterium",
"Commensalibacter",
"Snodgrassella",
"Gilliamella",
"Bartonella",
"Frischella",
"Apis",
"GB_VCs",)
levs= c("unclassified",
"Lactobacillus",
"kunkeei",
"Bifidobacterium",
"Commensalibacter",
"Snodgrassella",
"Gilliamella",
"Bartonella",
"Frischella",
"Apis",
"GB_VCs")
krk_df %>% mutate("sam_name"= unlist(strsplit(sample, split = "B|P"))) %>%
filter(c((rank_code=="G" | rank_code=="U" | taxon== "GB_VCs") & percentage_of_reads>1))%>%
filter(sample_type=="bacteriome") %>%
ggplot(aes(x=sam_name, y=percentage_of_reads,
fill=factor(taxon, levels = levs))) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = col_list) +
guides(fill = guide_legend(title = "Genus")) +
labs(x="", y="Relative Abundance")+
theme_classic()+
theme(axis.text.x = element_text(size = 20, angle = 90, hjust = .5,
vjust = .5, face
= "plain"),
axis.text.y = element_text(size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))
cols<- brewer.pal(11, "Spectral")
show_col(cols)
col_list<- c("Lactobacillus"=cols[10],
"kunkeei"="lightblue",
"Lactococcus"= cols[4],
"Bifidobacterium"=cols[8],
"Commensalibacter"="tomato3",
"unclassified"="grey",
"Snodgrassella"=cols[6],
"Gilliamella" =cols[7],
"Bartonella"=cols[3],
"Apis"=cols[1],
"GB_VCs"="turquoise",
"Frischella"=cols[5])
levs= c("unclassified",
"Lactobacillus",
"kunkeei",
"Bifidobacterium",
"Commensalibacter",
"Snodgrassella",
"Gilliamella",
"Bartonella",
"Frischella",
"Apis",
"GB_VCs")
krk_df %>% mutate("sam_name"= unlist(strsplit(sample, split = "B|P"))) %>%
filter(c((rank_code=="G" | rank_code=="U" | taxon== "GB_VCs") & percentage_of_reads>1))%>%
filter(sample_type=="bacteriome") %>%
ggplot(aes(x=sam_name, y=percentage_of_reads,
fill=factor(taxon, levels = levs))) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = col_list) +
guides(fill = guide_legend(title = "Genus")) +
labs(x="", y="Relative Abundance")+
theme_classic()+
theme(axis.text.x = element_text(size = 20, angle = 90, hjust = .5,
vjust = .5, face
= "plain"),
axis.text.y = element_text(size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(RColorBrewer)
library(ggplot2)
library(tidyverse)
library(knitr)
library(stringr)
library(ComplexHeatmap)
if("wesanderson" %in% rownames(installed.packages())){
library(wesanderson)
} else{
install.packages("wesanderson", repos = "http://cran.us.r-project.org")
}
if("reshape2" %in% rownames(installed.packages())){
library(reshape2)
} else{
install.packages("reshape2", repos = "http://cran.us.r-project.org")
}
library(reshape2)
library(scales)
library(UpSetR)
library(grid)
library(plyr)
library(viridis)
source("../useful_func.R")
fastqc2<- fastqc %>% group_by(sample, trimming) %>%
dplyr::summarise(total_reads=sum(total_reads)) %>%
dplyr::mutate(sam_type=ifelse(grepl("P",sample), "virome","bacteriome"),
aim=ifelse(sam_type=="bacteriome", 55e6, 5e6),
sam_name=str_sub(sample, 1, -2))
fastqc_p<- "../../../results/data_validation/QC/Summary/fastQC_summary.txt"
fastqc_p<- "../../../results/data_validation/QC/Summary/fastQC_summary.txt"
fastqc<- read.table(fastqc_p, header=T, sep="\t") %>%
dplyr::mutate(direction=ifelse(direction == "paired.fastq.gz", lane, direction),
lane=ifelse(lane==direction,"NA", lane))
fastqc2<- fastqc %>% group_by(sample, trimming) %>%
dplyr::summarise(total_reads=sum(total_reads)) %>%
dplyr::mutate(sam_type=ifelse(grepl("P",sample), "virome","bacteriome"),
aim=ifelse(sam_type=="bacteriome", 55e6, 5e6),
sam_name=str_sub(sample, 1, -2))
ggplot(fastqc2, aes(x=reorder(sam_name, as.numeric(sam_name)), y=total_reads,
fill=factor(trimming, levels=c("pre", "post"))))+
geom_bar(stat = "identity", position = position_dodge())+
geom_hline(aes(yintercept=aim), linetype="dashed")+
guides(fill=guide_legend(title = "Trimming"))+
theme_classic()+
facet_grid(sam_type~., scales="free_y")
setwd("../../")
report<- "../results/data_validation/kraken2_output/Summary/all_samples_report.txt"
#snakemake@input[1]
krk_df<- read.csv(report, header=T, sep="\t")
unique(krk_df$sample)
length(unique(krk_df$sample))
my_pal<- palette("Pastel1")[c(1:4, 9)]
dom_names<- rev(unique(factor(
krk_df$taxon[c(krk_df$rank_code=="U"|krk_df$rank_code=="D")])))
names(my_pal)<- dom_names
show_col(my_pal)
plt_krk_df<- krk_df %>% mutate("sam_name"= unlist(strsplit(sample, split = "B|P"))) %>% filter( c(rank_code=="U"|rank_code=="D"))
my_pal<-my_pal[plt_krk_df$taxon]
krk_comm_plt<-
ggplot(plt_krk_df, aes(x=reorder(sam_name, as.numeric(sam_name)),
y=percentage_of_reads,
fill=factor(taxon, levels = c("unclassified",
"Eukaryota",
"Bacteria","GB_VCs","Viruses")))) +
geom_bar(position="stack", stat="identity") +
labs(x="Sample", y="Percentage of Reads") +
scale_fill_manual(values = my_pal) +
scale_y_continuous(breaks = seq(0, 100, by = 5))+
guides(fill = guide_legend(title = "Domain")) +
theme_classic()+
facet_grid(sample_type~.)
krk_comm_plt
fastqc2<- fastqc %>% group_by(sample, trimming) %>%
dplyr::summarise(total_reads=sum(total_reads)) %>%
dplyr::mutate(sam_type=ifelse(grepl("P",sample), "virome","bacteriome"),
aim=ifelse(sam_type=="bacteriome", 55e6, 5e6),
sam_name=str_sub(sample, 1, -2))
ggplot(fastqc2, aes(x=reorder(sam_name, as.numeric(sam_name)), y=total_reads,
fill=factor(trimming, levels=c("pre", "post"))))+
geom_bar(stat = "identity", position = position_dodge())+
geom_hline(aes(yintercept=aim), linetype="dashed")+
guides(fill=guide_legend(title = "Trimming"))+
theme_classic()+
facet_grid(sam_type~., scales="free_y")
my_pal=setNames(c("green", "yellow", "red"),c(1, 2, 3))
fastqc3<- fastqc%>% select(! c("total_reads", "poor_Qual_reads", "read_length")) %>%
unite(entry, sample, trimming, direction,lane, id) %>% column_to_rownames(var="entry")
fastqc3[fastqc3=="pass"]<- as.numeric(1)
fastqc3[fastqc3=="warn"]<- 2
fastqc3[fastqc3=="fail"]<- 3
fastqc4<- as.matrix(fastqc3)
fastqc4<- apply(fastqc4, 2, as.numeric)
rownames(fastqc4)<- rownames(fastqc3)
Heatmap(t(fastqc4), col=my_pal,
show_row_dend=F,show_column_dend=F,
column_names_gp = gpar(fontsize = 5,  fontface = "bold"))
setwd("../../")
report<- "../results/data_validation/kraken2_output/Summary/all_samples_report.txt"
#snakemake@input[1]
krk_df<- read.csv(report, header=T, sep="\t")
unique(krk_df$sample)
length(unique(krk_df$sample))
my_pal<- palette("Pastel1")[c(1:4, 9)]
dom_names<- rev(unique(factor(
krk_df$taxon[c(krk_df$rank_code=="U"|krk_df$rank_code=="D")])))
names(my_pal)<- dom_names
show_col(my_pal)
plt_krk_df<- krk_df %>% mutate("sam_name"= unlist(strsplit(sample, split = "B|P"))) %>% filter( c(rank_code=="U"|rank_code=="D"))
my_pal<-my_pal[plt_krk_df$taxon]
krk_comm_plt<-
ggplot(plt_krk_df, aes(x=reorder(sam_name, as.numeric(sam_name)),
y=percentage_of_reads,
fill=factor(taxon, levels = c("unclassified",
"Eukaryota",
"Bacteria","GB_VCs","Viruses")))) +
geom_bar(position="stack", stat="identity") +
labs(x="Sample", y="Percentage of Reads") +
scale_fill_manual(values = my_pal) +
scale_y_continuous(breaks = seq(0, 100, by = 5))+
guides(fill = guide_legend(title = "Domain")) +
theme_classic()+
facet_grid(sample_type~.)
krk_comm_plt
setwd("../../")
report<- "../results/data_validation/kraken2_output/Summary/all_samples_report.txt"
#snakemake@input[1]
krk_df<- read.csv(report, header=T, sep="\t")
unique(krk_df$sample)
length(unique(krk_df$sample))
my_pal<- palette("Pastel1")[c(1:4, 9)]
dom_names<- rev(unique(factor(
krk_df$taxon[c(krk_df$rank_code=="U"|krk_df$rank_code=="D")])))
names(my_pal)<- dom_names
show_col(my_pal)
plt_krk_df<- krk_df %>% mutate("sam_name"= unlist(strsplit(sample, split = "B|P"))) %>% filter( c(rank_code=="U"|rank_code=="D"))
my_pal<-my_pal[plt_krk_df$taxon]
krk_comm_plt<-
ggplot(plt_krk_df, aes(x=reorder(sam_name, as.numeric(sam_name)),
y=percentage_of_reads,
fill=factor(taxon, levels = c("unclassified",
"Eukaryota",
"Bacteria","GB_VCs","Viruses")))) +
geom_bar(position="stack", stat="identity") +
labs(x="Sample", y="Percentage of Reads") +
scale_fill_manual(values = my_pal) +
scale_y_continuous(breaks = seq(0, 100, by = 5))+
guides(fill = guide_legend(title = "Domain")) +
theme_classic()+
facet_grid(sample_type~.)
krk_comm_plt
tr<-1
krk_df_genus<- krk_df %>%  mutate("sam_name"= unlist(strsplit(sample, split = "B|P")),
"tax_plt"=ifelse((percentage_of_reads>tr & taxon %in% levs), taxon,
paste("other<", tr,"%", sep=""))) %>%
filter(c((rank_code=="G" | rank_code=="U" | taxon=="GB_VCs")))%>%
filter(sample_type=="bacteriome")
tr<-1
levs<- get_gen_col(krk_df_genus$taxon, krk_df_genus$percentage_of_reads, threshold = tr)[[1]]
tr<-1
levs<- get_gen_col(krk_df_genus$taxon, krk_df_genus$percentage_of_reads, threshold = tr)[[1]]
tr<-1
krk_df_genus<- krk_df %>%  mutate("sam_name"= unlist(strsplit(sample, split = "B|P")),
"tax_plt"=ifelse((percentage_of_reads>tr), taxon,
paste("other<", tr,"%", sep=""))) %>%
filter(c((rank_code=="G" | rank_code=="U" | taxon=="GB_VCs")))%>%
filter(sample_type=="bacteriome")
levs<- get_gen_col(krk_df_genus$taxon, krk_df_genus$percentage_of_reads, threshold = tr)[[1]]
col_list<- get_gen_col(krk_df_genus$taxon, krk_df_genus$percentage_of_reads,threshold = tr)[[2]]
ggplot(krk_df_genus, aes(x=reorder(sam_name, as.numeric(sam_name)), y=percentage_of_reads,
fill=factor(tax_plt, levels = levs))) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = col_list) +
guides(fill = guide_legend(title = "Genus")) +
labs(x="", y="Relative Abundance")+
theme_classic()+
theme(axis.text.x = element_text(size = 20, angle = 90, hjust = .5,
vjust = .5, face
= "plain"),
axis.text.y = element_text(size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))
View(fastqc)
fastqc$sample[fastqc$trimming=="pre" &fastqc$length_distribution=="warn"]
fastqc$sample[fastqc$trimming=="pre" & fastqc$length_distribution=="warn"]
fastqc$sample[fastqc$trimming=="pre" & fastqc$length_distribution=="pass"]
Heatmap(t(fastqc4),
col=my_pal,
show_row_dend=F,show_column_dend=F,
column_names_gp = gpar(fontsize = 5,  fontface = "bold"))
Heatmap(t(fastqc4),col=my_pal,
show_row_dend=F,show_column_dend=F,
column_names_gp = gpar(fontsize = 5,  fontface = "bold"))
my_pal=setNames(c("green", "yellow", "red"),c(1, 2, 3))
fastqc3<- fastqc%>% select(! c("total_reads", "poor_Qual_reads", "read_length")) %>%
unite(entry, sample, trimming, direction,lane, id) %>% column_to_rownames(var="entry")
fastqc3[fastqc3=="pass"]<- as.numeric(1)
fastqc3[fastqc3=="warn"]<- 2
fastqc3[fastqc3=="fail"]<- 3
fastqc4<- as.matrix(fastqc3)
fastqc4<- apply(fastqc4, 2, as.numeric)
rownames(fastqc4)<- rownames(fastqc3)
Heatmap(t(fastqc4),col=my_pal,
show_row_dend=F,show_column_dend=F,
column_names_gp = gpar(fontsize = 5,  fontface = "bold"))
fastqc$sample[fastqc$trimming=="pre" & fastqc$length_distribution=="pass"]
fastqc_p<- "../../../results/data_validation/QC/Summary/fastQC_summary.txt"
fastqc<- read.table(fastqc_p, header=T, sep="\t") %>%
dplyr::mutate(direction=ifelse(direction == "paired.fastq.gz", lane, direction),
lane=ifelse(lane==direction,"NA", lane))
read_count<- "../../../results/data_validation/QC/Summary/read_count.txt"
reads<- read.table(read_count, header=T)
fastqc2<- fastqc %>% group_by(sample, trimming) %>%
dplyr::summarise(total_reads=sum(total_reads)) %>%
dplyr::mutate(sam_type=ifelse(grepl("P",sample), "virome","bacteriome"),
aim=ifelse(sam_type=="bacteriome", 55e6, 5e6),
sam_name=str_sub(sample, 1, -2))
ggplot(fastqc2, aes(x=reorder(sam_name, as.numeric(sam_name)), y=total_reads,
fill=factor(trimming, levels=c("pre", "post"))))+
geom_bar(stat = "identity", position = position_dodge())+
geom_hline(aes(yintercept=aim), linetype="dashed")+
guides(fill=guide_legend(title = "Trimming"))+
theme_classic()+
facet_grid(sam_type~., scales="free_y")
reads<- reads %>% mutate(retained_reads_QC=(reads_postQC/reads_preQC)*100, retained_reads_filt=(reads_postFilt/reads_preQC)*100) # calculate percentage of retained reads
kable(reads)
m_reads<-melt(reads, varnames=c('reads_preQC', 'reads_postQC', "reads_postFilt"), id.vars =c("bases_preQC","bases_postQC", "bases_postFilt", "sample", "retained_reads_QC", "retained_reads_filt"),  value.name = "reads", variable.name = "stage") #prepare data for plotting
kable(head(m_reads))
m_reads2<- m_reads %>% filter(sample!="LDP")
col=c("azure4", "azure3", "azure2")
names(col)<- unique(m_reads2$stage)
col<-col[m_reads2$stage]
nam<- c("Before QC", "After QC", "After Filtering")
names(nam)<- c("reads_preQC", "reads_postQC", "reads_postFilt")
nam<- nam[m_reads2$stage]
m_reads2<- m_reads2 %>% mutate("sam_type"=ifelse(grepl("P", sample), "Virome", "Bacteriome"),
"sam_name"=unlist(strsplit(sample, split = "B|P")),
"hline"=ifelse(grepl("P", sample), 5e6, 5.5e7))
m_reads2$retained_reads_QC[m_reads2$stage=="reads_preQC"]<- NA
m_reads2$retained_reads_filt[m_reads2$stage=="reads_preQC"]<- NA
m_reads2$retained_reads_filt[m_reads2$stage=="reads_postQC"]<- NA
m_reads2$retained_reads_QC[m_reads2$stage=="reads_postFilt"]<- NA
coalesce(m_reads2$retained_reads_QC, m_reads2$retained_reads_filt)
labs=paste(format(coalesce(m_reads2$retained_reads_QC, m_reads2$retained_reads_filt), digits=2), "%", sep="")
labs[labs=="  NA%"] <- ""
ggplot(m_reads2,aes(x = reorder(sam_name, as.numeric(sam_name)), y=reads, fill=stage))+
geom_bar(stat="identity", position=position_dodge())+
#scale_y_continuous(breaks = c(0,1e6, seq(1e6, max(m_reads$reads), by = 1e7)))+
geom_text(aes(x=sam_name, label=labs),  position=position_dodge(0.9), size=3, angle =90)+
geom_hline(aes(yintercept = hline), col="red", linetype="dotted")+
scale_fill_manual(values=col, name = "QC", labels = nam)+
labs(x="Sample")+
ggtitle("Quality score >= 25")+
theme_classic()+
theme(axis.text.x = element_text(size = 10, angle = 90, hjust = .5,
vjust = .5, face
= "plain"),
axis.text.y = element_text(size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))+
facet_grid(sam_type~., scales = "free_y")
report<- "../../../results/data_validation/motus_output/Summary/motus_combined.txt"
df_motus<- read.csv(report, header=T, sep="\t")
condense_motu <- function(motu){
motu_condensed = strsplit(motu, " ")[[1]][1]
return(motu_condensed)
}
df_motus_combined <- df_motus %>%
group_by(Sample) %>%
dplyr::mutate("rel_ab"=rel_ab/sum(rel_ab)) %>%
group_by(Sample, motu) %>%
dplyr::mutate(mean_rel_ab = mean(rel_ab)) %>%
dplyr::mutate(motu_condensed = Vectorize(condense_motu)(motu))
unique(df_motus_combined$Sample)
length(unique(df_motus_combined$Sample))
condense_motu <- function(motu){
motu_condensed = strsplit(motu, " ")[[1]][1]
return(motu_condensed)
}
motu_list <- df_motus_combined %>%
pull(motu) %>% unique
head(motu_list)
high_motu_list <- df_motus_combined %>%
filter(rel_ab >= 0.1) %>%
pull(motu_condensed) %>% unique
high_motu_list
tr<-0.01
df_motus_filt <- df_motus_combined %>%
mutate("tax_plt"=ifelse(rel_ab>tr, motu_condensed,
paste("other<", tr,"%", sep=""))) %>%
group_by(Sample, motu) %>%
dplyr::mutate(Sample=unlist(strsplit(Sample, split = ".S00"))[1],
sam_org=ifelse(grepl("LLE", Sample), "Kristen", "Malick"))
levs<- get_gen_col(df_motus_filt$motu_condensed , df_motus_filt$rel_ab, threshold = tr, add_pal="Greys", unclass = "unassigned", display_all = F)[[1]]
tr<-0.01
df_motus_filt <- df_motus_combined %>%
mutate("tax_plt"=ifelse(rel_ab>tr, motu_condensed,
paste("other<", tr,"%", sep=""))) %>%
group_by(Sample, motu) %>%
dplyr::mutate(Sample=unlist(strsplit(Sample, split = ".S00"))[1],
sam_org=ifelse(grepl("LLE", Sample), "Kristen", "Malick"))
levs<- get_gen_col(df_motus_filt$motu_condensed , df_motus_filt$rel_ab, threshold = tr, add_pal="Greys", unclass = "unassigned")[[1]]
col_list<- get_gen_col(df_motus_filt$motu_condensed , df_motus_filt$rel_ab, threshold = tr, add_pal="Greys", unclass = "unassigned")[[2]]
levs
col_list
ggplot(df_motus_filt, aes(x=reorder(Sample, as.numeric(unlist(strsplit(Sample, "B")))), y=rel_ab,
fill=factor(tax_plt, levels = levs))) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = col_list) +
guides(fill = guide_legend(title = "Genus")) +
labs(x="", y="Relative Abundance")+
theme_classic()+ guides(size = "legend", colour = "none") +
theme(axis.text.x = element_text(size =10, angle = 90, hjust = .5, vjust=.5, face = "plain"),
axis.text.y = element_text(size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))
View(df_motus_filt)
tr<-0.01
df_motus_filt <- df_motus_combined %>% mutate("tax_plt"=ifelse(rel_ab>tr, motu_condensed,
paste("other<", tr,"%", sep=""))) %>% mutate(sam_org=ifelse(grepl("LLE", Sample), "Kristen", "Malick")) %>% filter(!sam_org=="Kristen")
levs<- get_gen_col(df_motus_filt$motu_condensed , df_motus_filt$rel_ab, threshold = tr, add_pal="Greys", unclass = "unassigned")[[1]]
col_list<- get_gen_col(df_motus_filt$motu_condensed , df_motus_filt$rel_ab, threshold = tr, add_pal="Greys", unclass = "unassigned")[[2]]
levs
col_list
ggplot(df_motus_filt, aes(x=reorder(Sample, as.numeric(unlist(strsplit(Sample, "B")))), y=rel_ab,
fill=factor(tax_plt, levels = levs))) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = col_list) +
guides(fill = guide_legend(title = "Genus")) +
labs(x="", y="Relative Abundance")+
theme_classic()+ guides(size = "legend", colour = "none") +
theme(axis.text.x = element_text(size =10, angle = 90, hjust = .5, vjust=.5, face = "plain"),
axis.text.y = element_text(size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))
df_motus_count<- df_motus_combined %>% group_by(Sample) %>% dplyr::summarise(bacterial_reads=sum(read_count, na.rm = T)) %>% mutate(sam_org=ifelse(grepl("LLE", Sample), "Kristen", "Malick"))
ggplot(df_motus_count,aes(x = reorder(Sample, as.numeric(unlist(strsplit(Sample, "B")))),
y=bacterial_reads,
fill=factor(sam_org, levels=c("Malick", "Kristen"))))+
geom_bar(stat="identity")+
scale_fill_manual(values = c("azure4", "azure3")) +
guides(fill = guide_legend(title = "Sample Origin")) +
theme_classic()+
labs(y="reads mapping to bacterial MGs")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"))
df_motus_mal<- df_motus_combined %>% group_by(Sample) %>% dplyr::summarise(bacterial_reads=sum(read_count, na.rm = T)) %>% mutate(sam_org=ifelse(grepl("LLE", Sample), "Kristen", "Malick")) %>% filter(sam_org=="Malick")
df_count_comb<- left_join(df_motus_mal, reads[, c("sample", "reads_postFilt")], by= c("Sample"="sample"))
ggplot(df_count_comb, aes(x=reads_postFilt, y=bacterial_reads))+
geom_point()+
labs(x="Total Reads", y="Reads Mapping to Bacterial MG")+
theme_classic()
setwd("/run/user/1000/gvfs/sftp:host=curnagl.dcsr.unil.ch,user=mndiaye1/users/mndiaye1/beemicrophage_dir/PHOSTER/workflow/scripts/MAGs")
knitr::opts_chunk$set(echo = TRUE)
asmbl_stats_p<- "../../../results/assembly/HF_assembly/all_HFassemblies_summary_tab.txt"
asmbl_stats<- read_csv(asmbl_stats_p, header=T, sep="\t")
asmbl_stats<- read.csv(asmbl_stats_p, header=T, sep="\t")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
asmbl_stats<- fread(asmbl_stats_p)
View(asmbl_stats)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(tidyverse)
asmbl_stats2<- asmbl_stats %>% group_by(sample, accepted) %>%
dplyr::summarise("bp"= sum(length),
"total_contigs"=length(contig))
View(asmbl_stats2)
asmbl_stats2<- asmbl_stats %>% group_by(sample, accepted) %>%
dplyr::summarise("bp"= sum(length),
"total_contigs"=length(contig),
sam_type=ifelse(grepl("P", sample), "virome", "bacteriome"))
View(asmbl_stats2)
View(asmbl_stats2)
asmbl_stats2<- asmbl_stats %>% group_by(sample, accepted) %>%
dplyr::summarise("bp"= sum(length),
"total_contigs"=length(contig)) %>%
dplyr::mutate(sam_type=ifelse(grepl("P", sample), "virome", "bacteriome"),
sam_name=substring(sample,1, nchar(sample)-1))
View(asmbl_stats2)
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=bp, fill=accepted))+
geom_bar(stat = "identity", psoition=position_dodge())+
theme_classic()+
facet_wrap(.~sam_type)
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=bp, fill=accepted))+
geom_bar(stat = "identity", posoition=position_dodge())+
theme_classic()+
facet_wrap(.~sam_type)
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=bp, fill=accepted))+
geom_bar(stat = "identity", position=position_dodge())+
theme_classic()+
facet_wrap(.~sam_type)
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=bp, fill=accepted))+
geom_bar(stat = "identity", position=position_dodge())+
theme_classic()+
facet_grid(.~sam_type)
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=bp, fill=accepted))+
geom_bar(stat = "identity", position=position_dodge())+
theme_classic()+
facet_grid(sam_type~.)
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=bp, fill=accepted))+
geom_bar(stat = "identity", position=position_dodge())+
theme_classic()+
facet_grid(sam_type~., scales = "free_y")
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=factor(bp, levels = ("yes", "no")), fill=accepted))+
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)), y=factor(bp, levels = c("yes", "no")), fill=accepted))+
geom_bar(stat = "identity", position=position_dodge())+
theme_classic()+
facet_grid(sam_type~., scales = "free_y")
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)),
y=bp,
fill=factor(accepted, levels = c("yes", "no"))))+
geom_bar(stat = "identity", position=position_dodge())+
theme_classic()+
facet_grid(sam_type~., scales = "free_y")
