dplyr::mutate(filtered=ifelse(good=="yes", 1, 0)) %>%
group_by(sample) %>%
dplyr::summarise(count_good=sum(filtered),
tot_count=length(sample)) %>%
melt()
sam_levs= unique(paste(sort(as.numeric(gsub("B", "", checkm_alls2$sample))), "B", sep=""))
ggplot(checkm_alls2,aes(x=factor(sample, levels = sam_levs), y=value,
fill=factor(variable, levels = c("tot_count", "count_good")))) +
geom_bar(stat="identity", position = position_dodge())+
scale_fill_discrete(name = "", labels = c("Total MAGs", "Filtered MAGs"))+
labs(x="", y= "number of MAGs")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
checkm_alls %>% group_by(sample, good) %>%
dplyr::summarise(count=length(good)) %>%
ggplot(.,aes(x=good, y=count)) +
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
labs(x="", y= "number of MAGs")+
theme_classic()
get_taxa_cols<- function(entry){
tax_l<- unlist(strsplit(entry, ";"))
tax_l_ref<- lapply(tax_l, function(x) gsub(".*__", "", x))
tax_l_ref[tax_l_ref==""]<- NA
names(tax_l_ref)<- c("domain", "phylum", "class", "order", "family", "genus", "species")
tax_l_ref$species<- gsub("__*.","", tax_l_ref$species)
return(tax_l_ref)
}
gtdb_p<- "../../../results/MAG_binning/gtdbtk_classification/gtdbtk.bac120.summary.tsv"
gtdb_raw<- read.csv(gtdb_p, header=T, sep = "\t")
gtdb<- gtdb_raw %>% group_by(user_genome) %>%
dplyr::mutate("domain"= get_taxa_cols(classification)$domain,
"pylum"= get_taxa_cols(classification)$pylum,
"class"= get_taxa_cols(classification)$class,
"order"= get_taxa_cols(classification)$order,
"family"= get_taxa_cols(classification)$family,
"genus"= get_taxa_cols(classification)$genus,
"species"= get_taxa_cols(classification)$species)
core=c("Bombilactobacillus" , "Commensalibacter", "Lactobacillus","Bifidobacterium","Gilliamella",  "Frischella", "Snodgrassella",  "Bartonella","Apibacter")
gtdb_QC<- left_join(checkm_filt, gtdb, by=c("Bin Id"="user_genome")) %>%
group_by(genus) %>%
dplyr::mutate("n_genus"= length(genus))
gtdb_core<- gtdb_QC %>% filter(genus %in% core)
levs<- get_gen_col_abs(gtdb_QC$genus)[[1]]
cols<-get_gen_col_abs(gtdb_QC$genus)[[2]]
gtdb_comp<- gtdb_QC %>% group_by(sample, genus) %>%
dplyr::summarise(n=length(genus)) %>%
group_by(sample) %>%
dplyr::mutate(n_rel=n/sum(n))
ggplot(gtdb_comp, aes(x=factor(sample, levels = sam_levs), y=n, fill=factor(genus, levels = levs)))+
geom_histogram(stat = "identity", position = "stack")+
scale_fill_manual(values=cols, name="Genus")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_comp, aes(x=factor(sample, levels = sam_levs), y=n_rel, fill=factor(genus, levels = levs)))+
geom_histogram(stat = "identity", position = "stack")+
scale_fill_manual(values=cols, name="Genus")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_comp, aes(x="", y=n_rel, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0)
lab<-paste("n=", gtdb_QC$n_genus, sep="")
# Data for average genome size have been taken from
# Bombilactobacillus (i.e., Firm4): Zheng et al., 2020 (Microbiology Society)
# Other genera: Zheng et al., 2019 (PNAS; Dataset_S01)
avg_size<- c("Bombilactobacillus"=1.82e6,
"Lactobacillus"=1.91e6,
"Bifidobacterium"=1.98e6,
"Gilliamella"=2.71e6,
"Frischella"=2.69e6,
"Snodgrassella"=2.43e6,
"Bartonella"=2.64e6,
"Apibacter"=2.5e6)
gtdb_QC$avg_size<- avg_size[gtdb_QC$genus]
ggplot(gtdb_QC, aes(x=genus, y=`Genome size (bp)`))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_point(aes(y=avg_size), shape=95, size=12, col="red")+
geom_text(aes(genus, 0, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_QC, aes(x=genus, y=Completeness))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, 0, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_QC, aes(x=genus, y=Contamination))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, -1, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_QC, aes(x=genus, y=`Strain heterogeneity`))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, -1, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_core, aes(x=`Genome size (bp)`, y= Completeness, group=genus))+
geom_point()+
geom_smooth(method="lm")+
theme_classic()+
facet_wrap(.~genus)
ggplot(gtdb_core, aes(x=Completeness, y= `Strain heterogeneity`, group=genus))+
geom_point()+
geom_smooth(method="lm")+
theme_classic()+
facet_wrap(.~genus)
clust_info_p<-"../../../results/reference_db/data_tables/Cdb.csv"
clust_win_p<- "../../../results/reference_db/data_tables/Wdb.csv"
mtdata_p<- "../../../data/metadata/RefGenomes_isolates_mtdata.csv"
clust_info<-read.csv(clust_info_p, header=T)
clust_win<-read.csv(clust_win_p, header=T)
mtdata<- read.csv(mtdata_p, header=T, sep="\t")
clust_info<- clust_info %>%
dplyr::mutate("ref"=ifelse(genome %in% clust_win$genome, "*",""),
"species"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv",
new ="Species",
df_corr = gsub(" ", "",gsub(".fna", "", genome))),
"SDP"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv", new = "SDP",  df_corr = gsub(".fna", "", genome)),
"Bin Id"= gsub(".fa|.fna","", genome))
clust_assign<- clust_info %>% group_by(secondary_cluster) %>%
dplyr::mutate(secondary_cluster_n=length(secondary_cluster),
SDP=paste(unique(SDP[!is.na(SDP)]), collapse="/"),
species=paste(unique(species[!is.na(species)]), collapse="/"))
clust_assign$SDP[clust_assign$SDP==""]<- "unclassified"
clust_assign$species[clust_assign$species==""]<-"unclassified"
tax_clust<- gtdb_QC %>% select(`Bin Id`, genus, species ) %>% rename("gtdb_sp"=species)
clust_assign <- clust_assign %>% left_join(., tax_clust, by="Bin Id")
clust_assign<- clust_assign %>%
dplyr::mutate(species=ifelse((species=="unclassified" & is.na(gtdb_sp)), genus,
ifelse((species=="unclassified" & !is.na(gtdb_sp)), gtdb_sp, species)))
clust_assign$species[is.na(clust_assign$species)]<-"uncalssified"
gtdb_reduced<- gtdb_QC %>% ungroup()%>% select(`Bin Id`, Completeness, Contamination, `Strain heterogeneity`, `Genome size (bp)`, `N50 (contigs)`, )
clust_assign_full<- left_join(clust_assign, gtdb_reduced, by="Bin Id") %>%
dplyr::mutate("isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
clust_info_full<- clust_info %>%
dplyr::mutate("Bin Id"= gsub(".fa|.fna","", genome),
"isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
singletons<- clust_assign_full %>% filter(secondary_cluster_n==1)
to_delete<- singletons %>% filter(isolate=="no")
#clust_assign_full<-""
#to_delete<-""
clust_final<- clust_assign_full %>% filter(!`Bin Id` %in% to_delete$`Bin Id`)
clust_win_final<- clust_final%>% filter(ref=="*")
ggplot(clust_win_final, aes(x="", y=n_rel, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0)
write.table(clust_info_full, "../../../results/reference_db/data_tables/clust_info.tsv", quote = F, row.names = F, sep = "\t")
write.table(clust_assign_full, "../../../results/reference_db/data_tables/clust_assign.tsv", quote = F, row.names = F, sep = "\t")
View(clust_info_full)
View(clust_assign_full)
View(gtdb_QC)
View(clust_assign_full)
View(clust_assign_full)
clust_info_p<-"../../../results/reference_db/data_tables/Cdb.csv"
clust_win_p<- "../../../results/reference_db/data_tables/Wdb.csv"
mtdata_p<- "../../../data/metadata/RefGenomes_isolates_mtdata.csv"
clust_info<-read.csv(clust_info_p, header=T)
clust_win<-read.csv(clust_win_p, header=T)
mtdata<- read.csv(mtdata_p, header=T, sep="\t")
clust_info<- clust_info %>%
dplyr::mutate("ref"=ifelse(genome %in% clust_win$genome, "*",""),
"species"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv",
new ="Species",
df_corr = gsub(" ", "",gsub(".fna", "", genome))),
"SDP"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv", new = "SDP",  df_corr = gsub(".fna", "", genome)),
"Bin Id"= gsub(".fa|.fna","", genome))
clust_assign<- clust_info %>% group_by(secondary_cluster) %>%
dplyr::mutate(secondary_cluster_n=length(secondary_cluster),
SDP=paste(unique(SDP[!is.na(SDP)]), collapse="/"),
species=paste(unique(species[!is.na(species)]), collapse="/"))
clust_assign$SDP[clust_assign$SDP==""]<- "unclassified"
clust_assign$species[clust_assign$species==""]<-"unclassified"
tax_clust<- gtdb_QC %>% select(`Bin Id`, genus, species ) %>% rename("gtdb_sp"=species)
clust_assign <- clust_assign %>% left_join(., tax_clust, by="Bin Id")
clust_assign<- clust_assign %>%
dplyr::mutate(species=ifelse((species=="unclassified" & is.na(gtdb_sp)), genus,
ifelse((species=="unclassified" & !is.na(gtdb_sp)), gtdb_sp, species)))
clust_assign$species[is.na(clust_assign$species)]<-"uncalssified"
View(clust_win)
View(gtdb_comp)
View(gtdb_core)
View(gtdb_QC)
gtdb_QC[gtdb_QC$`Bin Id`=="29B_MAG.17",]
gtdb_QC$genus[gtdb_QC$`Bin Id`=="29B_MAG.17",]
gtdb_QC$genus[gtdb_QC$`Bin Id`=="29B_MAG.17"]
gtdb_QC$order[gtdb_QC$`Bin Id`=="29B_MAG.17"]
gtdb_QC$order[gtdb_QC$`Bin Id`=="29B_MAG.18"]
clust_final<- clust_assign_full %>% filter(!`Bin Id` %in% to_delete$`Bin Id`)
clust_win_final<- clust_final%>% filter(ref=="*")
View(to_delete)
View(clust_win_final)
View(clust_assign_full)
to_delete<- singletons %>% filter(isolate=="no") %>% filter(SDP=="unclassified" & species=="unclassified")
View(to_delete)
tax_clust<- gtdb_QC %>% select(`Bin Id`, genus, species ) %>% rename("gtdb_sp"=species)
clust_assign <- clust_assign %>% left_join(., tax_clust, by="Bin Id")
clust_assign<- clust_assign %>%
dplyr::mutate(species=ifelse((species=="unclassified" & is.na(gtdb_sp)), genus,
ifelse((species=="unclassified" & !is.na(gtdb_sp)), gtdb_sp, species)))
clust_info_p<-"../../../results/reference_db/data_tables/Cdb.csv"
clust_win_p<- "../../../results/reference_db/data_tables/Wdb.csv"
mtdata_p<- "../../../data/metadata/RefGenomes_isolates_mtdata.csv"
clust_info<-read.csv(clust_info_p, header=T)
clust_win<-read.csv(clust_win_p, header=T)
mtdata<- read.csv(mtdata_p, header=T, sep="\t")
clust_info<- clust_info %>%
dplyr::mutate("ref"=ifelse(genome %in% clust_win$genome, "*",""),
"species"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv",
new ="Species",
df_corr = gsub(" ", "",gsub(".fna", "", genome))),
"SDP"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv", new = "SDP",  df_corr = gsub(".fna", "", genome)),
"Bin Id"= gsub(".fa|.fna","", genome))
clust_assign<- clust_info %>% group_by(secondary_cluster) %>%
dplyr::mutate(secondary_cluster_n=length(secondary_cluster),
SDP=paste(unique(SDP[!is.na(SDP)]), collapse="/"),
species=paste(unique(species[!is.na(species)]), collapse="/"))
clust_assign$SDP[clust_assign$SDP==""]<- "unclassified"
clust_assign$species[clust_assign$species==""]<-"unclassified"
tax_clust<- gtdb_QC %>% select(`Bin Id`, genus, species ) %>% rename("gtdb_sp"=species)
clust_assign <- clust_assign %>% left_join(., tax_clust, by="Bin Id")
clust_assign<- clust_assign %>%
dplyr::mutate(species=ifelse((species=="unclassified" & is.na(gtdb_sp)), genus,
ifelse((species=="unclassified" & !is.na(gtdb_sp)), gtdb_sp, species)))
clust_assign$species[is.na(clust_assign$species)]<-"unclassified"
gtdb_reduced<- gtdb_QC %>% ungroup()%>% select(`Bin Id`, Completeness, Contamination, `Strain heterogeneity`, `Genome size (bp)`, `N50 (contigs)`, )
clust_assign_full<- left_join(clust_assign, gtdb_reduced, by="Bin Id") %>%
dplyr::mutate("isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
clust_info_full<- clust_info %>%
dplyr::mutate("Bin Id"= gsub(".fa|.fna","", genome),
"isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
to_delete<- singletons %>% filter(isolate=="no") %>% filter(SDP=="unclassified" & species=="unclassified")
clust_final<- clust_assign_full %>% filter(!`Bin Id` %in% to_delete$`Bin Id`)
clust_win_final<- clust_final%>% filter(ref=="*")
View(to_delete)
View(to_delete)
to_delete<- clust_assign %>% filter(isolate=="no") %>% filter(SDP=="unclassified" & species=="unclassified")
to_delete<- clust_assign_full %>% filter(isolate=="no") %>% filter(SDP=="unclassified" & species=="unclassified")
View(to_delete)
clust_info_p<-"../../../results/reference_db/data_tables/Cdb.csv"
clust_win_p<- "../../../results/reference_db/data_tables/Wdb.csv"
mtdata_p<- "../../../data/metadata/RefGenomes_isolates_mtdata.csv"
clust_info<-read.csv(clust_info_p, header=T)
clust_win<-read.csv(clust_win_p, header=T)
mtdata<- read.csv(mtdata_p, header=T, sep="\t")
clust_info<- clust_info %>%
dplyr::mutate("ref"=ifelse(genome %in% clust_win$genome, "*",""),
"species"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv",
new ="Species",
df_corr = gsub(" ", "",gsub(".fna", "", genome))),
"SDP"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv", new = "SDP",  df_corr = gsub(".fna", "", genome)),
"Bin Id"= gsub(".fa|.fna","", genome))
clust_assign<- clust_info %>% group_by(secondary_cluster) %>%
dplyr::mutate(secondary_cluster_n=length(secondary_cluster),
SDP=paste(unique(SDP[!is.na(SDP)]), collapse="/"),
species=paste(unique(species[!is.na(species)]), collapse="/"))
clust_assign$SDP[clust_assign$SDP==""]<- "unclassified"
clust_assign$species[clust_assign$species==""]<-"unclassified"
clust_info_p<-"../../../results/reference_db/data_tables/Cdb.csv"
clust_win_p<- "../../../results/reference_db/data_tables/Wdb.csv"
mtdata_p<- "../../../data/metadata/RefGenomes_isolates_mtdata.csv"
clust_info<-read.csv(clust_info_p, header=T)
clust_win<-read.csv(clust_win_p, header=T)
mtdata<- read.csv(mtdata_p, header=T, sep="\t")
clust_info<- clust_info %>%
dplyr::mutate("ref"=ifelse(genome %in% clust_win$genome, "*",""),
"species"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv",
new ="Species",
df_corr = gsub(" ", "",gsub(".fna", "", genome))),
"SDP"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv", new = "SDP",  df_corr = gsub(".fna", "", genome)),
"Bin Id"= gsub(".fa|.fna","", genome))
clust_assign<- clust_info %>% group_by(secondary_cluster) %>%
dplyr::mutate(secondary_cluster_n=length(secondary_cluster),
SDP=paste(unique(SDP[!is.na(SDP)]), collapse="/"),
species=paste(unique(species[!is.na(species)]), collapse="/"))
View(clust_assign)
clust_assign$species[1]
tax_clust<- gtdb_QC %>% select(`Bin Id`, genus, species ) %>% rename("gtdb_sp"=species)
clust_assign <- clust_assign %>% left_join(., tax_clust, by="Bin Id")
clust_assign<- clust_assign %>%
dplyr::mutate(species=ifelse((species=="" & is.na(gtdb_sp)), genus,
ifelse((species=="" & !is.na(gtdb_sp)), gtdb_sp, species)))
clust_assign$species[is.na(clust_assign$species)]<-"unclassified"
View(clust_assign)
View(clust_assign)
clust_info_p<-"../../../results/reference_db/data_tables/Cdb.csv"
clust_win_p<- "../../../results/reference_db/data_tables/Wdb.csv"
mtdata_p<- "../../../data/metadata/RefGenomes_isolates_mtdata.csv"
clust_info<-read.csv(clust_info_p, header=T)
clust_win<-read.csv(clust_win_p, header=T)
mtdata<- read.csv(mtdata_p, header=T, sep="\t")
clust_info<- clust_info %>%
dplyr::mutate("ref"=ifelse(genome %in% clust_win$genome, "*",""),
"species"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv",
new ="Species",
df_corr = gsub(" ", "",gsub(".fna", "", genome))),
"SDP"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv", new = "SDP",  df_corr = gsub(".fna", "", genome)),
"Bin Id"= gsub(".fa|.fna","", genome))
clust_assign<- clust_info %>% group_by(secondary_cluster) %>%
dplyr::mutate(secondary_cluster_n=length(secondary_cluster),
SDP=paste(unique(SDP[!is.na(SDP)]), collapse="/"),
species=paste(unique(species[!is.na(species)]), collapse="/"))
clust_assign$SDP[clust_assign$SDP==""]<- "unclassified"
clust_assign$species[clust_assign$species==""]<-"unclassified"
tax_clust<- gtdb_QC %>% select(`Bin Id`, genus, species ) %>% rename("gtdb_sp"=species)
clust_assign <- clust_assign %>% left_join(., tax_clust, by="Bin Id")
clust_assign<- clust_assign %>%
dplyr::mutate(species=ifelse((species=="unclassified" & is.na(gtdb_sp)), genus,
ifelse((species=="unclassified" & !is.na(gtdb_sp)), gtdb_sp, species)))
clust_assign$species[is.na(clust_assign$species)]<-"unclassified"
gtdb_reduced<- gtdb_QC %>% ungroup()%>% select(`Bin Id`, Completeness, Contamination, `Strain heterogeneity`, `Genome size (bp)`, `N50 (contigs)`, )
clust_assign_full<- left_join(clust_assign, gtdb_reduced, by="Bin Id") %>%
dplyr::mutate("isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
clust_info_full<- clust_info %>%
dplyr::mutate("Bin Id"= gsub(".fa|.fna","", genome),
"isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
to_delete<- clust_assign_full %>% filter(isolate=="no") %>%
filter(SDP=="unclassified" & species=="unclassified")
clust_final<- clust_assign_full %>% filter(!`Bin Id` %in% to_delete$`Bin Id`)
clust_win_final<- clust_final%>% filter(ref=="*")
View(clust_final)
clust_final<- clust_assign_full %>% filter(!`Bin Id` %in% to_delete$`Bin Id`) %>%
relocate("Bin Id", .before=genome)
clust_info_full<- clust_info %>%
dplyr::mutate("isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(tidyverse)
library(RColorBrewer)
library(dendextend)
source("../useful_func.R")
asmbl_stats_p<- "../../../results/assembly/HF_assembly/all_HFassemblies_summary_tab.txt"
asmbl_stats<- fread(asmbl_stats_p)
asmbl_stats2<- asmbl_stats %>% group_by(sample, accepted) %>%
dplyr::summarise("bp"= sum(length),
"total_contigs"=length(contig)) %>%
dplyr::mutate(sam_type=ifelse(grepl("P", sample), "virome", "bacteriome"),
sam_name=substring(sample,1, nchar(sample)-1))
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)),
y=bp,
fill=factor(accepted, levels = c("yes", "no"))))+
geom_bar(stat = "identity", position=position_dodge())+
scale_fill_discrete( name="Passes Filter?")+
labs(x="")+
theme_classic()+
facet_grid(sam_type~., scales = "free_y")
checkm_alls_p<- "../../../results/MAG_binning/checkm_QC/summary/all_MAGs_stats.tsv"
checkm_filt_p<- "../../../results/MAG_binning/checkm_QC/summary/filtered_MAGs_stats.tsv"
checkm_alls<- read.csv(checkm_alls_p, header=T, sep="\t", check.names = F)
checkm_filt<- read.csv(checkm_filt_p, header=T, sep="\t", check.names = F)
filt_mags<- checkm_filt$`Bin Id`
checkm_alls<- checkm_alls %>%
dplyr::mutate("good"=ifelse(`Bin Id` %in% filt_mags, "yes", "no"))
checkm_alls2<- checkm_alls %>%
dplyr::mutate(filtered=ifelse(good=="yes", 1, 0)) %>%
group_by(sample) %>%
dplyr::summarise(count_good=sum(filtered),
tot_count=length(sample)) %>%
melt()
sam_levs= unique(paste(sort(as.numeric(gsub("B", "", checkm_alls2$sample))), "B", sep=""))
ggplot(checkm_alls2,aes(x=factor(sample, levels = sam_levs), y=value,
fill=factor(variable, levels = c("tot_count", "count_good")))) +
geom_bar(stat="identity", position = position_dodge())+
scale_fill_discrete(name = "", labels = c("Total MAGs", "Filtered MAGs"))+
labs(x="", y= "number of MAGs")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
checkm_alls %>% group_by(sample, good) %>%
dplyr::summarise(count=length(good)) %>%
ggplot(.,aes(x=good, y=count)) +
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
labs(x="", y= "number of MAGs")+
theme_classic()
get_taxa_cols<- function(entry){
tax_l<- unlist(strsplit(entry, ";"))
tax_l_ref<- lapply(tax_l, function(x) gsub(".*__", "", x))
tax_l_ref[tax_l_ref==""]<- NA
names(tax_l_ref)<- c("domain", "phylum", "class", "order", "family", "genus", "species")
tax_l_ref$species<- gsub("__*.","", tax_l_ref$species)
return(tax_l_ref)
}
gtdb_p<- "../../../results/MAG_binning/gtdbtk_classification/gtdbtk.bac120.summary.tsv"
gtdb_raw<- read.csv(gtdb_p, header=T, sep = "\t")
gtdb<- gtdb_raw %>% group_by(user_genome) %>%
dplyr::mutate("domain"= get_taxa_cols(classification)$domain,
"pylum"= get_taxa_cols(classification)$pylum,
"class"= get_taxa_cols(classification)$class,
"order"= get_taxa_cols(classification)$order,
"family"= get_taxa_cols(classification)$family,
"genus"= get_taxa_cols(classification)$genus,
"species"= get_taxa_cols(classification)$species)
core=c("Bombilactobacillus" , "Commensalibacter", "Lactobacillus","Bifidobacterium","Gilliamella",  "Frischella", "Snodgrassella",  "Bartonella","Apibacter")
gtdb_QC<- left_join(checkm_filt, gtdb, by=c("Bin Id"="user_genome")) %>%
group_by(genus) %>%
dplyr::mutate("n_genus"= length(genus))
gtdb_core<- gtdb_QC %>% filter(genus %in% core)
levs<- get_gen_col_abs(gtdb_QC$genus)[[1]]
cols<-get_gen_col_abs(gtdb_QC$genus)[[2]]
gtdb_comp<- gtdb_QC %>% group_by(sample, genus) %>%
dplyr::summarise(n=length(genus)) %>%
group_by(sample) %>%
dplyr::mutate(n_rel=n/sum(n))
ggplot(gtdb_comp, aes(x=factor(sample, levels = sam_levs), y=n, fill=factor(genus, levels = levs)))+
geom_histogram(stat = "identity", position = "stack")+
scale_fill_manual(values=cols, name="Genus")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_comp, aes(x=factor(sample, levels = sam_levs), y=n_rel, fill=factor(genus, levels = levs)))+
geom_histogram(stat = "identity", position = "stack")+
scale_fill_manual(values=cols, name="Genus")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_comp, aes(x="", y=n_rel, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0)
lab<-paste("n=", gtdb_QC$n_genus, sep="")
# Data for average genome size have been taken from
# Bombilactobacillus (i.e., Firm4): Zheng et al., 2020 (Microbiology Society)
# Other genera: Zheng et al., 2019 (PNAS; Dataset_S01)
avg_size<- c("Bombilactobacillus"=1.82e6,
"Lactobacillus"=1.91e6,
"Bifidobacterium"=1.98e6,
"Gilliamella"=2.71e6,
"Frischella"=2.69e6,
"Snodgrassella"=2.43e6,
"Bartonella"=2.64e6,
"Apibacter"=2.5e6)
gtdb_QC$avg_size<- avg_size[gtdb_QC$genus]
ggplot(gtdb_QC, aes(x=genus, y=`Genome size (bp)`))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_point(aes(y=avg_size), shape=95, size=12, col="red")+
geom_text(aes(genus, 0, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_QC, aes(x=genus, y=Completeness))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, 0, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_QC, aes(x=genus, y=Contamination))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, -1, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_QC, aes(x=genus, y=`Strain heterogeneity`))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, -1, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_core, aes(x=`Genome size (bp)`, y= Completeness, group=genus))+
geom_point()+
geom_smooth(method="lm")+
theme_classic()+
facet_wrap(.~genus)
ggplot(gtdb_core, aes(x=Completeness, y= `Strain heterogeneity`, group=genus))+
geom_point()+
geom_smooth(method="lm")+
theme_classic()+
facet_wrap(.~genus)
clust_info_p<-"../../../results/reference_db/data_tables/Cdb.csv"
clust_win_p<- "../../../results/reference_db/data_tables/Wdb.csv"
mtdata_p<- "../../../data/metadata/RefGenomes_isolates_mtdata.csv"
clust_info<-read.csv(clust_info_p, header=T)
clust_win<-read.csv(clust_win_p, header=T)
mtdata<- read.csv(mtdata_p, header=T, sep="\t")
clust_info<- clust_info %>%
dplyr::mutate("ref"=ifelse(genome %in% clust_win$genome, "*",""),
"species"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv",
new ="Species",
df_corr = gsub(" ", "",gsub(".fna", "", genome))),
"SDP"=get_mtdata("../../../data/metadata/RefGenomes_isolates_mtdata.csv", new = "SDP",  df_corr = gsub(".fna", "", genome)),
"Bin Id"= gsub(".fa|.fna","", genome))
clust_assign<- clust_info %>% group_by(secondary_cluster) %>%
dplyr::mutate(secondary_cluster_n=length(secondary_cluster),
SDP=paste(unique(SDP[!is.na(SDP)]), collapse="/"),
species=paste(unique(species[!is.na(species)]), collapse="/"))
clust_assign$SDP[clust_assign$SDP==""]<- "unclassified"
clust_assign$species[clust_assign$species==""]<-"unclassified"
tax_clust<- gtdb_QC %>% select(`Bin Id`, genus, species ) %>% rename("gtdb_sp"=species)
clust_assign <- clust_assign %>% left_join(., tax_clust, by="Bin Id")
clust_assign<- clust_assign %>%
dplyr::mutate(species=ifelse((species=="unclassified" & is.na(gtdb_sp)), genus,
ifelse((species=="unclassified" & !is.na(gtdb_sp)), gtdb_sp, species)))
clust_assign$species[is.na(clust_assign$species)]<-"unclassified"
gtdb_reduced<- gtdb_QC %>% ungroup()%>% select(`Bin Id`, Completeness, Contamination, `Strain heterogeneity`, `Genome size (bp)`, `N50 (contigs)`, )
clust_assign_full<- left_join(clust_assign, gtdb_reduced, by="Bin Id") %>%
dplyr::mutate("isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
clust_info_full<- clust_info %>%
dplyr::mutate("isolate"=ifelse(grepl("MAG", genome), "no", "yes"))
to_delete<- clust_assign_full %>% filter(isolate=="no") %>%
filter(SDP=="unclassified" & species=="unclassified")
#clust_assign_full<-""
#to_delete<-""
clust_final<- clust_assign_full %>% filter(!`Bin Id` %in% to_delete$`Bin Id`) %>%
relocate("Bin Id", .before=genome)
clust_win_final<- clust_final%>% filter(ref=="*") %>%
relocate("Bin Id", .before=genome)
knitr::opts_chunk$set(echo = TRUE)
