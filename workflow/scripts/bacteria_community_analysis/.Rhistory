facet_wrap(.~genus)+
labs(fill="", x="", y="Relative Frequency within Genus")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5,
hjust=1, size =5, face="bold"),
legend.position="top",
legend.text = element_text(size=10,face="bold")); put_sp_prop_plt
ggplotly(put_sp_prop_plt)
library(vegan)
library(BiodiversityR)
mapping_info_norm<- mapping_info %>%
dplyr::select(sample, filtered_pairs) %>%
group_by(sample) %>%
mutate(norm_factor=max(.$filtered_pairs)/filtered_pairs) %>%
dplyr::select(!filtered_pairs)
genome_info_filt_norm<- genome_info_filt %>% left_join(., mapping_info_norm, by="sample") %>%
mutate(norm_reads_ab=norm_reads*norm_factor) %>%
relocate(norm_reads_ab, .after=filtered_read_pair_count)
div_matrix<- genome_info_filt_norm %>%
pivot_wider(id_cols = sample, names_from = id,  values_from=norm_reads, values_fill=0) %>%
column_to_rownames(var="sample")
div_mtdata<- genome_info_filt_norm %>%
mutate(sam_name=as.numeric(gsub("B", "", sample)),
origin=ifelse(sam_name<56, "Switzerland", "Japan"),
colony=factor(ifelse(sam_name<23, 1,
ifelse(sam_name %in% 23:55, 2,
ifelse(sam_name %in% 56:67,3,4))))) %>%
ungroup() %>%
dplyr::select(id,sample, origin, colony, norm_reads) %>%
pivot_wider(names_from = id,  values_from=norm_reads, values_fill=0)
find_genome<- function(row){
gene<- unlist(strsplit(row[2], split=";"))
df<- data.frame("gene"= gene)
return(df)
}
format_motupan_file<- function(file, sk){
print(file)
df<- read.csv(file, skip=sk, header=T, sep="\t") %>%
filter(type=="core", mean_copy_per_genome==1) %>%
dplyr::select(genomes, genes)
formatted_df<- do.call(rbind, apply(df, 1, find_genome))
return(formatted_df)
}
stb<- read.csv("../../../results/reference_db_filtered/all_genomes/all_bacterial_RefGenomes.stb", header=F, sep="\t")
colnames(stb)<- c("scaffold", "genome")
all_genes_df<- fread("../../../results/inStrain/B/data_tables/all_gene_info.tsv") %>% left_join(., stb, by="scaffold") %>%
mutate("species"=get_mtdata(mtdata_path=clust_p, "species", corr="genome", genome),
"genus"= get_mtdata(mtdata_path=clust_p, "genus", corr="genome", genome),
"id"=get_mtdata(mtdata_path=clust_p, "id", corr="genome", genome),
"secondary_cluster"=get_mtdata(mtdata_path=clust_p, "secondary_cluster", corr="genome", genome),
"secondary_cluster_n"=get_mtdata(mtdata_path=clust_p, "secondary_cluster_n", corr="genome", genome))
gene_to_genome<- setNames(all_genes_df$genome, all_genes_df$gene)
gene_to_genome<- gene_to_genome[unique(names(gene_to_genome))]
motupan_dir<- "../../../results/pangenomes/B/"
motupan_files<-list.files(motupan_dir, pattern = "_mOTUpan.tsv$", recursive = TRUE, full.names = T)
clust_filt_p<- "../../../results/reference_db_filtered/summary_data_tables/clust_filtered.tsv"
motupan_df<-do.call(rbind, lapply(motupan_files,function(x) format_motupan_file(x, sk=16)))%>%
mutate(genome=gene_to_genome[gene]) %>% drop_na() %>%
mutate("species"= get_mtdata(mtdata_path=clust_filt_p, "species", corr="genome", genome),
"genus"= get_mtdata(mtdata_path=clust_filt_p, "genus", corr="genome", genome),
"id"=get_mtdata(mtdata_path=clust_filt_p, "id", corr="genome", genome),
"secondary_cluster"=get_mtdata(mtdata_path=clust_filt_p, "secondary_cluster", corr="genome", genome),
"secondary_cluster_n"=get_mtdata(mtdata_path=clust_p, "secondary_cluster_n", corr="genome", genome))
rownames(motupan_df)<- 1:nrow(motupan_df)
sog_isolates_p<- "../../../results/pangenomes/B/all_isolates_single_copy_OGs.tsv"
sog_genomes_p<- "../../../results/pangenomes/B/all_single_copy_OGs.tsv"
sog_genomes<- read.csv(sog_genomes_p, header = T, sep="\t")
sog_isolates<- read.csv(sog_isolates_p, header = T, sep="\t") %>%
mutate("species"= get_mtdata(mtdata_path=clust_filt_p, "species", corr="Bin.Id", genome),
"genus"= get_mtdata(mtdata_path=clust_filt_p, "genus", corr="Bin.Id", genome),
"og_tax"=paste(Orthogroup, genus, sep="-")) %>%
group_by(genus)%>%
mutate(nr_genomes=length(unique(genome))) %>% group_by(genus, Orthogroup) %>%
mutate(og_prevalence=length(genome))
sog_isolates_core<- sog_isolates %>% filter(og_prevalence==nr_genomes)
all_core<- sog_genomes %>%
mutate("og_tax"=paste(Orthogroup, genus, sep="-")) %>%
filter((og_tax %in% sog_isolates_core$og_tax)) %>%
mutate("id"= get_mtdata(mtdata_path=clust_filt_p, "id", corr="Bin.Id", genome))
motupan_df %>% filter(id %in% genome_info_filt$id) %>%
group_by(genus,id) %>%
summarise(n_core=length(gene)) %>%
ggplot(aes(x=id, y=n_core, fill=genus)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = seq(0, 1500, by=100))+
scale_fill_manual(values=get_core_cols())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all_core %>% filter(Bin_Id %in% unique(clust$Bin.Id), id %in% genome_info_filt$id)%>%
group_by(id) %>%
dplyr::summarise(n_core=length(gene),
genus=unique(genus)) %>%
ggplot(aes(x=id, y=n_core, fill=genus)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = seq(0, 1800, by=100))+
scale_fill_manual(values=get_core_cols())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggbeeswarm)
#mOTUpan
motupan_core<- all_genes_df_filt %>%
dplyr::select(!c("type_ogf")) %>%
rename("type"=type_motupan) %>% filter(type=="core", coverage>=5) %>%
group_by(origin, sample, genus, id) %>%
summarise(nucl_diversity=mean(nucl_diversity),
n_snv=sum(SNV_count),
length_core=sum(gene_length),
perc_snv=(n_snv/length_core)*100)
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.text = element_text(face="bold"),
legend.position = "bottom"); genera_relab_plt
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.text = element_text(face="bold"),
legend.position = "top"); genera_relab_plt
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.position = "top",
legend.text = element_text(face="bold")); genera_relab_plt
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.text = element_text(face="bold")); genera_relab_plt
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.text = element_text(face="bold")); genera_relab_plt
genome_info<-  read.csv("../../../results/inStrain/B/data_tables/all_genome_info.tsv", header=T, sep="\t") %>%
mutate("id"= get_mtdata(mtdata_path="../../../results/reference_db_filtered/summary_data_tables/clust_filtered_winners.tsv",
"id", corr="genome", genome))%>%
relocate(species, .after = genome) %>%
relocate(genus, .after = species) %>%
relocate(id, .after = genus)
genome_info_filt <- genome_info %>% filter(coverage_median>=5 & breadth >= 0.5) %>%
group_by(sample) %>%
mutate("actual_length"=length*breadth,
norm_reads=filtered_read_pair_count/actual_length,
"frequency"=norm_reads/sum(norm_reads)) %>%
relocate(frequency, .before = coverage) %>%
group_by(sample, genus) %>%
mutate(freq_inG=norm_reads/sum(norm_reads))
th=0.01
levs<- get_gen_col(genome_info_filt$genus, rel_ab = genome_info_filt$frequency, threshold = th)[[1]]
cols<-  get_gen_col(genome_info_filt$genus, rel_ab = genome_info_filt$frequency, threshold = th)[[2]]
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.text = element_text(face="bold")); genera_relab_plt
ggplotly(genera_relab_plt)
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.text = element_text(face="bold")); genera_relab_plt
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.position = "bottom",
legend.text = element_text(face="bold")); genera_relab_plt
ggsave("../../../Figures/230324_DMF_FriSeminar/community_composition_genus_bottomLeg.png",
genera_relab_plt,
units = "in",
dpi = 900,
width = 11.7,
height = 8.3)
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
geom_segment(aes(x = 0.5, xend = 49.5, y = -0.03, yend = -0.03),
size=10, col="lightpink2") +
geom_segment(aes(x = 49.5, xend = 73.5, y = -0.03, yend = -0.03),
size=10, col="lightcyan2") +
annotate("text", x = 25, y = -0.03, label = "Switzerland", face="bold") +
annotate("text", x = 61, y = -0.03, label = "Japan", face="bold") +
scale_fill_manual(values=cols)+
labs(x="", y="Relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.position = "top",
legend.text = element_text(face="bold")); genera_relab_plt
ggsave("../../../Figures/230324_DMF_FriSeminar/community_composition_genus_topLeg.png",
genera_relab_plt,
units = "in",
dpi = 900,
width = 11.7,
height = 8.3)
library(ggbeeswarm)
#mOTUpan
motupan_core<- all_genes_df_filt %>%
dplyr::select(!c("type_ogf")) %>%
rename("type"=type_motupan) %>% filter(type=="core", coverage>=5) %>%
group_by(origin, sample, genus, id) %>%
summarise(nucl_diversity=mean(nucl_diversity),
n_snv=sum(SNV_count),
length_core=sum(gene_length),
perc_snv=(n_snv/length_core)*100)
find_genome<- function(row){
gene<- unlist(strsplit(row[2], split=";"))
df<- data.frame("gene"= gene)
return(df)
}
format_motupan_file<- function(file, sk){
print(file)
df<- read.csv(file, skip=sk, header=T, sep="\t") %>%
filter(type=="core", mean_copy_per_genome==1) %>%
dplyr::select(genomes, genes)
formatted_df<- do.call(rbind, apply(df, 1, find_genome))
return(formatted_df)
}
motupan_dir<- "../../../results/pangenomes/B/"
motupan_files<-list.files(motupan_dir, pattern = "_mOTUpan.tsv$", recursive = TRUE, full.names = T)
clust_filt_p<- "../../../results/reference_db_filtered/summary_data_tables/clust_filtered.tsv"
motupan_df<-do.call(rbind, lapply(motupan_files,function(x) format_motupan_file(x, sk=16)))%>%
mutate(genome=gene_to_genome[gene]) %>% drop_na() %>%
mutate("species"= get_mtdata(mtdata_path=clust_filt_p, "species", corr="genome", genome),
"genus"= get_mtdata(mtdata_path=clust_filt_p, "genus", corr="genome", genome),
"id"=get_mtdata(mtdata_path=clust_filt_p, "id", corr="genome", genome),
"secondary_cluster"=get_mtdata(mtdata_path=clust_filt_p, "secondary_cluster", corr="genome", genome),
"secondary_cluster_n"=get_mtdata(mtdata_path=clust_p, "secondary_cluster_n", corr="genome", genome))
rownames(motupan_df)<- 1:nrow(motupan_df)
sog_isolates_p<- "../../../results/pangenomes/B/all_isolates_single_copy_OGs.tsv"
sog_genomes_p<- "../../../results/pangenomes/B/all_single_copy_OGs.tsv"
sog_genomes<- read.csv(sog_genomes_p, header = T, sep="\t")
sog_isolates<- read.csv(sog_isolates_p, header = T, sep="\t") %>%
mutate("species"= get_mtdata(mtdata_path=clust_filt_p, "species", corr="Bin.Id", genome),
"genus"= get_mtdata(mtdata_path=clust_filt_p, "genus", corr="Bin.Id", genome),
"og_tax"=paste(Orthogroup, genus, sep="-")) %>%
group_by(genus)%>%
mutate(nr_genomes=length(unique(genome))) %>% group_by(genus, Orthogroup) %>%
mutate(og_prevalence=length(genome))
sog_isolates_core<- sog_isolates %>% filter(og_prevalence==nr_genomes)
all_core<- sog_genomes %>%
mutate("og_tax"=paste(Orthogroup, genus, sep="-")) %>%
filter((og_tax %in% sog_isolates_core$og_tax)) %>%
mutate("id"= get_mtdata(mtdata_path=clust_filt_p, "id", corr="Bin.Id", genome))
# Get a list of core genes according to the two different tools
core_genes_motupan<- unique(motupan_df$gene)
core_genes_ogf<- unique(all_core$gene)
# get a list of id and the samples where they are found
sam_id <- genome_info_filt %>% mutate(sam_ids=paste(sample, id, sep="-")) %>% pull(sam_ids)
sam_id <- unique(sam_id)
# Update the gene file by adding info on core and accessory plus filtering for ids that are found in the sample
all_genes_df<- all_genes_df %>% filter(genus %in% get_core()) %>%
mutate(type_motupan=ifelse(gene %in% core_genes_motupan, "core", "accessory"),
type_ogf=ifelse(gene %in% core_genes_ogf, "core", "accessory"),
sam_ids=paste(sample, id, sep="-"))
all_genes_df_filt<- all_genes_df %>%
filter(sam_ids %in% sam_id) %>%
mutate(origin=ifelse(as.numeric(gsub("B", "", sample))>55, "Japan", "Switzerland"))
core_vs_acc_plt<- all_genes_df_filt %>% filter(coverage>=5, !genus=="Bombella") %>% melt(measure.vars=c("type_motupan", "type_ogf"), variable.name="tool")%>%
group_by(genus, sample, tool, id) %>%
summarise(core=sum(value=="core"),
acccessory=sum(value=="accessory"))%>%
melt(measure.vars=c("core", "acccessory")) %>% group_by(genus, id, variable, tool) %>%
summarise(SD=sd(value),me=mean(value)) %>%
group_by(id, tool) %>%
mutate(newy=cumsum(me)) %>%
ggplot(aes(x=id, y=me, fill=variable))+
facet_grid(tool~genus, scales = "free_x")+
geom_bar(stat="identity", position = position_stack(reverse = TRUE))+
geom_errorbar(aes(ymin = newy-SD, ymax = newy+SD), width = 0.3, position = "identity")+
scale_y_continuous(breaks = seq(0,3000, 200))+
scale_fill_manual(values=c("black", "gray"))+
labs(x="", y="Gene Count", fill="")+
theme_classic()+
theme(axis.text.x=element_text(angle = 70, vjust = 1, hjust=1, size=10, face="bold")); core_vs_acc_plt
core_vs_acc_motupan_plt<- all_genes_df_filt %>%
filter(coverage>=5, !genus=="Bombella") %>%
reshape2::melt(measure.vars=c("type_motupan", "type_ogf"), variable.name="tool")%>%
group_by(genus, sample, tool, id) %>%
summarise(core=sum(value=="core"),
acccessory=sum(value=="accessory"))%>%
melt(measure.vars=c("core", "acccessory")) %>%
filter(tool=="type_motupan") %>%
group_by(genus, id, variable, tool) %>%
summarise(SD=sd(value),me=mean(value)) %>%
group_by(id, tool) %>%
mutate(newy=cumsum(me)) %>%
ggplot(aes(x=Get_labels_linneus(id), y=me, fill=variable))+
facet_wrap(.~genus, ncol = 1, scales = "free_y", strip.position="top")+
geom_bar(stat="identity", position = position_stack(reverse = TRUE))+
geom_errorbar(aes(ymin = newy-SD, ymax = newy+SD), width = 0.3, position = "identity")+
scale_y_continuous(breaks = seq(0,3000, 200))+
scale_fill_manual(values=c("black", "gray"))+
labs(x="", y="Gene Count", fill="")+
theme_classic()+
coord_flip()+
theme(axis.text.y=element_text(angle = 0, vjust = 0, hjust=1, size=7, face="bold"),
axis.text.x=element_text(face="bold"),
strip.text=element_text(face="bold", size=9),
axis.title.x=element_text(face="bold"),
legend.text=element_text(face="bold", size=8),
legend.position = "top"); core_vs_acc_motupan_plt
library(ggbeeswarm)
#mOTUpan
motupan_core<- all_genes_df_filt %>%
dplyr::select(!c("type_ogf")) %>%
rename("type"=type_motupan) %>% filter(type=="core", coverage>=5) %>%
group_by(origin, sample, genus, id) %>%
summarise(nucl_diversity=mean(nucl_diversity),
n_snv=sum(SNV_count),
length_core=sum(gene_length),
perc_snv=(n_snv/length_core)*100)
ggplot(motupan_core, aes(x=length_core, y=n_snv, col=genus))+
geom_point()+
scale_color_manual(values=get_core_cols())+
labs(x="Length Core Genome", y="SNV count", title = "mOTUpan core genome")+
theme_classic()
snv_motupan<- ggplot(motupan_core, aes(x=Get_labels_linneus(id),
y=perc_snv, fill=genus))+
geom_boxplot(outlier.shape = NA)+
geom_point(size=0.5)+
scale_fill_manual(values=get_core_cols()[motupan_core$genus])+
scale_color_manual(values=c("grey", "black"))+
ylim(0,7)+
labs(x="", y="% SNV")+
theme_classic()+
theme(axis.text.y=element_text(size=7, face="bold"),
axis.title.x = element_text(size=10, face="bold"),
legend.position = "none",
strip.text = element_text(face="bold"))+
coord_flip()+
facet_wrap(.~genus, ncol = 1, scales = "free_y"); snv_motupan
NuclDiv_motupan<- ggplot(motupan_core, aes(x=id, y=nucl_diversity, fill=genus))+
geom_boxplot(outlier.shape = NA)+
geom_beeswarm(size=0.5, aes(col=origin), alpha=0.3)+
scale_fill_manual(values=get_core_cols()[motupan_core$genus])+
scale_color_manual(values=c("grey", "black"))+
labs(x="", y="nucleotide diversity", title = "mOTUpan core genome")+
theme_classic()+
theme(axis.text.x=element_text(angle = 90, vjust = 1, hjust=1, size=10, face="bold"),
axis.title.y = element_text(size=10, face="bold"))+
facet_wrap(.~genus, nrow = 1, scales = "free_x"); NuclDiv_motupan
# Orthofinder
ogf_core<- all_genes_df_filt %>%
dplyr::select(!c("type_motupan")) %>%
rename("type"=type_ogf) %>% filter(type=="core", coverage>=5) %>%
group_by(origin, sample, genus, id) %>%
summarise(nucl_diversity=mean(nucl_diversity),
n_snv=sum(SNV_count),
length_core=sum(gene_length),
perc_snv=(n_snv/length_core)*100)
ggplot(ogf_core, aes(x=length_core, y=n_snv, col=genus))+
geom_point()+
scale_color_manual(values=get_core_cols())+
labs(x="Length Core Genome", y="SNV count", title = "mOTUpan core genome")+
theme_classic()
snv_ogf<- ggplot(ogf_core, aes(x=id, y=perc_snv, fill=genus))+
geom_boxplot(outlier.shape = NA)+
geom_beeswarm(size=0.5, aes(col=origin), alpha=0.3)+
scale_fill_manual(values=get_core_cols()[ogf_core$genus])+
ylim(0,7)+
scale_color_manual(values=c("grey", "black"))+
labs(x="", y="% SNV", title = "Orthofinder core genome")+
theme_classic()+
theme(axis.text.x=element_text(angle = 90, vjust = 1, hjust=1, size=10, face="bold"),
axis.title.y = element_text(size=10, face="bold"))+
facet_wrap(.~genus, nrow = 1, scales = "free_x"); snv_ogf
NuclDiv_ogf<- ggplot(ogf_core, aes(x=id, y=nucl_diversity, fill=genus))+
geom_boxplot(outlier.shape = NA)+
geom_beeswarm(size=0.5, aes(col=origin), alpha=0.3)+
scale_fill_manual(values=get_core_cols()[ogf_core$genus])+
scale_color_manual(values=c("grey", "black"))+
labs(x="", y="nucleotide diversity", title = "Orthofinder core genome")+
theme_classic()+
theme(axis.text.x=element_text(angle = 90, vjust = 1, hjust=1, size=10, face="bold"),
axis.title.y = element_text(size=10, face="bold"))+
facet_wrap(.~genus, nrow = 1, scales = "free_x"); NuclDiv_ogf
snv_motupan_bifido<- motupan_core %>% filter(genus=="Bifidobacterium")%>%
ggplot(aes(x=Get_labels_linneus(id),y=perc_snv, fill=genus))+
geom_boxplot(outlier.shape = NA)+
geom_point(size=0.5)+
scale_fill_manual(values=get_core_cols()[motupan_core$genus])+
scale_color_manual(values=c("grey", "black"))+
ylim(0,7)+
labs(x="", y="% SNV")+
theme_classic()+
theme(axis.text.y=element_text(size=7, face="bold"),
axis.title.x = element_text(size=10, face="bold"),
legend.position = "none",
strip.text = element_text(face="bold")); snv_motupan
snv_motupan_bifido<- motupan_core %>% filter(genus=="Bifidobacterium")%>%
ggplot(aes(x=Get_labels_linneus(id),y=perc_snv, fill=genus))+
geom_boxplot(outlier.shape = NA)+
geom_point(size=0.5)+
scale_fill_manual(values=get_core_cols()[motupan_core$genus])+
scale_color_manual(values=c("grey", "black"))+
ylim(0,7)+
labs(x="", y="% SNV")+
theme_classic()+
theme(axis.text.y=element_text(size=7, face="bold"),
axis.title.x = element_text(size=10, face="bold"),
legend.position = "none",
strip.text = element_text(face="bold")); snv_motupan_bifido
snv_motupan_bifido<- motupan_core %>% filter(genus=="Bifidobacterium")%>%
ggplot(aes(x=Get_labels_linneus(id),y=perc_snv, fill=genus))+
geom_boxplot(outlier.shape = NA)+
geom_point(size=0.5)+
scale_fill_manual(values=get_core_cols()[motupan_core$genus])+
scale_color_manual(values=c("grey", "black"))+
ylim(0,7)+
labs(x="", y="% SNV")+
theme_classic()+
coord_flip()+
theme(axis.text.y=element_text(size=7, face="bold"),
axis.title.x = element_text(size=10, face="bold"),
legend.position = "none",
strip.text = element_text(face="bold")); snv_motupan_bifido
ggsave("../../../Figures/230324_DMF_FriSeminar/SNVperc_mOTUpan_bifido.png",
snv_motupan_bifido,
units = "in",
dpi = 900,
width = 11.7,
height = 8.3 )
