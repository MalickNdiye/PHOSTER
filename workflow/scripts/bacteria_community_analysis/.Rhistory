knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(tidyverse)
library(RColorBrewer)
library(dendextend)
library(gtools)
library(ggbeeswarm)
source("../useful_func.R")
asmbl_stats_p<- "../../../results/assembly/HF_assembly/all_HFassemblies_summary_tab.txt"
asmbl_stats<- fread(asmbl_stats_p)
asmbl_stats2<- asmbl_stats %>% group_by(sample, accepted) %>%
dplyr::summarise("bp"= sum(length),
"total_contigs"=length(contig)) %>%
dplyr::mutate(sam_type=ifelse(grepl("P", sample), "virome", "bacteriome"),
sam_name=substring(sample,1, nchar(sample)-1))
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)),
y=bp,
fill=factor(accepted, levels = c("yes", "no"))))+
geom_bar(stat = "identity", position=position_dodge())+
scale_fill_discrete( name="Passes Filter?")+
labs(x="")+
theme_classic()+
facet_grid(sam_type~., scales = "free_y")
ggplot(asmbl_stats2, aes(x=reorder(sam_name,as.numeric(sam_name)),
y=total_contigs,
fill=factor(accepted, levels = c("yes", "no"))))+
geom_bar(stat = "identity", position=position_dodge())+
scale_fill_discrete( name="Passes Filter?")+
labs(x="")+
theme_classic()+
facet_grid(sam_type~., scales = "free_y")
checkm_alls_p<- "../../../results/MAG_binning/checkm_QC/summary/all_MAGs_stats.tsv"
checkm_filt_p<- "../../../results/MAG_binning/checkm_QC/summary/filtered_MAGs_stats.tsv"
checkm_alls<- read.csv(checkm_alls_p, header=T, sep="\t", check.names = F) %>% filter(Contamination<10, Completeness>75)
checkm_filt<- read.csv(checkm_filt_p, header=T, sep="\t", check.names = F)
filt_mags<- checkm_filt$`Bin Id`
checkm_alls<- checkm_alls %>%
dplyr::mutate("good"=ifelse(`Bin Id` %in% filt_mags, "yes", "no"))
checkm_alls2<- checkm_alls %>%
dplyr::mutate(filtered=ifelse(good=="yes", 1, 0)) %>%
group_by(sample) %>%
dplyr::summarise(count_good=sum(filtered),
tot_count=length(sample)) %>%
melt()
sam_levs= unique(paste(sort(as.numeric(gsub("B", "", checkm_alls2$sample))), "B", sep=""))
MAGs_filtering_plt<- ggplot(checkm_alls2,aes(x=factor(sample, levels = sam_levs), y=value,
fill=factor(variable, levels = c("tot_count", "count_good")))) +
geom_bar(stat="identity", position = position_dodge())+
scale_fill_manual(name = "", labels = c("Total MAGs", "Filtered MAGs"), values=c("lightskyblue3", "lightpink"))+
labs(x="", y= "# MAGs")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)); MAGs_filtering_plt
checkm_alls %>% group_by(sample, good) %>%
dplyr::summarise(count=length(good)) %>%
ggplot(.,aes(x=good, y=count)) +
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
labs(x="", y= "number of MAGs")+
theme_classic()
get_taxa_cols<- function(entry){
tax_l<- unlist(strsplit(entry, ";"))
tax_l_ref<- lapply(tax_l, function(x) gsub(".*__", "", x))
tax_l_ref[tax_l_ref==""]<- NA
names(tax_l_ref)<- c("domain", "phylum", "class", "order", "family", "genus", "species")
tax_l_ref$species<- gsub("__*.","", tax_l_ref$species)
return(tax_l_ref)
}
gtdb_p<- "../../../results/MAG_binning/gtdbtk_classification/gtdbtk.bac120.summary.tsv"
gtdb_raw<- read.csv(gtdb_p, header=T, sep = "\t")
gtdb<- gtdb_raw %>% group_by(user_genome) %>%
dplyr::mutate("domain"= get_taxa_cols(classification)$domain,
"pylum"= get_taxa_cols(classification)$pylum,
"class"= get_taxa_cols(classification)$class,
"order"= get_taxa_cols(classification)$order,
"family"= get_taxa_cols(classification)$family,
"genus"= get_taxa_cols(classification)$genus,
"species"= get_taxa_cols(classification)$species)
core=c("Bombilactobacillus" , "Commensalibacter", "Lactobacillus","Bifidobacterium","Gilliamella",  "Frischella", "Snodgrassella",  "Bartonella","Apibacter")
gtdb_QC<- left_join(checkm_filt, gtdb, by=c("Bin Id"="user_genome")) %>%
group_by(genus) %>%
dplyr::mutate("n_genus"= length(genus))
gtdb_core<- gtdb_QC %>% filter(genus %in% core)
levs<- get_gen_col_abs(gtdb_QC$genus)[[1]]
cols<-get_gen_col_abs(gtdb_QC$genus)[[2]]
gtdb_comp<- gtdb_QC %>% group_by(sample, genus) %>%
dplyr::summarise(n=length(genus)) %>%
group_by(sample) %>%
dplyr::mutate(n_rel=n/sum(n))
recovered_MAGs_plt<- ggplot(gtdb_comp, aes(x=factor(sample, levels = sam_levs), y=n, fill=factor(genus, levels = levs)))+
geom_histogram(stat = "identity", position = "stack")+
scale_fill_manual(values=cols, name="Genus")+
labs(y="# MAGs", x="")+
scale_y_continuous(breaks=seq(0,15, by=1))+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)); recovered_MAGs_plt
ggplot(gtdb_comp, aes(x=factor(sample, levels = sam_levs), y=n_rel, fill=factor(genus, levels = levs)))+
geom_histogram(stat = "identity", position = "stack")+
scale_fill_manual(values=cols, name="Genus")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gtdb_comp, aes(x="", y=n_rel, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0)
lab<-paste("n=", gtdb_QC$n_genus, sep="")
# Data for average genome size have been taken from
# Bombilactobacillus (i.e., Firm4): Zheng et al., 2020 (Microbiology Society)
# Other genera: Zheng et al., 2019 (PNAS; Dataset_S01)
avg_size<- c("Bombilactobacillus"=1.82e6,
"Lactobacillus"=1.91e6,
"Bifidobacterium"=1.98e6,
"Gilliamella"=2.71e6,
"Frischella"=2.69e6,
"Snodgrassella"=2.43e6,
"Bartonella"=2.64e6,
"Apibacter"=2.5e6)
gtdb_QC$avg_size<- avg_size[gtdb_QC$genus]
mag_genome_size_plt<- ggplot(gtdb_QC, aes(x=genus, y=`Genome size (bp)`))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_point(aes(y=avg_size), shape=95, size=12, col="red")+
geom_text(aes(genus, 0, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1));mag_genome_size_plt
mag_completeness_plt<- ggplot(gtdb_QC, aes(x=genus, y=Completeness))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, 0, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1));mag_completeness_plt
mag_contamination_plt<- ggplot(gtdb_QC, aes(x=genus, y=Contamination))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, -1, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1));mag_contamination_plt
mag_SH_plt<- ggplot(gtdb_QC, aes(x=genus, y=`Strain heterogeneity`))+
geom_boxplot(outlier.shape = NA)+
geom_point(position = position_jitter(0.2))+
geom_text(aes(genus, -1, label = lab),vjust = 1, check_overlap = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1));mag_SH_plt
ggplot(gtdb_core, aes(x=`Genome size (bp)`, y= Completeness, group=genus))+
geom_point()+
geom_smooth(method="lm",formula=y~log(x))+
theme_classic()+
facet_wrap(.~genus)
ggplot(gtdb_core, aes(x=Completeness, y= `Strain heterogeneity`, group=genus))+
geom_point()+
geom_smooth(method="lm")+
theme_classic()+
facet_wrap(.~genus)
clust_p<- "../../../results/reference_db_filtered/summary_data_tables/clust_filtered.tsv"
clust_win_p<- "../../../results/reference_db_filtered/summary_data_tables/clust_filtered_winners.tsv"
clust<- read.csv(clust_p, header=T, sep="\t") %>%
group_by(species)%>%
dplyr::mutate(genus=unlist(strsplit(species, split=" "))[1])
clust_win<- read.csv(clust_win_p, header=T, sep="\t") %>%
group_by(species)%>%
dplyr::mutate(genus=unlist(strsplit(species, split=" "))[1])
levs<- get_gen_col_abs(clust_win$genus)[[1]]
cols<-get_gen_col_abs(clust_win$genus)[[2]]
ref_db_comp_plt<- clust_win %>% group_by(genus) %>%
dplyr::summarise(genus_n=length(genus)) %>%
ggplot(aes(x="", y=genus_n, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
ggtitle("reference database: species composition")+
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0); ref_db_comp_plt
plts_p<-"../../../results/reference_db_filtered/figures/secondary_clusters_dendograms"
plots <- list.files(plts_p)
for(i in plots){
filename <- file.path(plts_p, i)
a<- knitr::include_graphics(filename)
print(a)
}
mapdata_p<- "../../../results/mapping/all_B_mapstats.tsv"
mapdata<- read.csv(mapdata_p, header=T, sep="\t") %>%
mutate(perc_map=(mapped/total_reads)*100,
perc_properly=(properly_paired/total_reads)*100,
perc_singletons=(singletons/total_reads)*100)
mapped_toRef_plt<- ggplot(mapdata, aes(x=factor(sample, levels=mixedsort(sample)),y=perc_map))+
geom_bar(stat="identity", position = position_dodge())+
labs(x="", y="% mapped")+
scale_y_continuous(breaks = seq(0, 110, by = 10))+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)); mapped_toRef_plt
ggplot(gtdb_comp, aes(x="", y=n_rel, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0)
ref_db_comp_plt<- clust_win %>% group_by(genus) %>%
dplyr::summarise(genus_n=length(genus)) %>%
ggplot(aes(x="", y=genus_n, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
ggtitle("reference database: species composition")+
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0); ref_db_comp_plt
View(clust_win)
recovered_MAGs_plt<- ggplot(gtdb_comp, aes(x=factor(sample, levels = sam_levs), y=n, fill=factor(genus, levels = levs)))+
geom_histogram(stat = "identity", position = "stack")+
scale_fill_manual(values=cols, name="Genus")+
labs(y="# MAGs", x="")+
scale_y_continuous(breaks=seq(0,15, by=1))+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)); recovered_MAGs_plt
View(clust_win)
ref_db_comp_plt<- clust_win %>% group_by(genus) %>%
dplyr::summarise(genus_n=length(genus)) %>%
ggplot(aes(x="", y=genus_n, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
ggtitle("reference database: species composition")+
labs(subtitle = nrow(clust_win))+
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0); ref_db_comp_plt
ref_db_comp_plt<- clust_win %>% group_by(genus) %>%
dplyr::summarise(genus_n=length(genus)) %>%
ggplot(aes(x="", y=genus_n, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
ggtitle("reference database: species composition")+
labs(subtitle = paste("number of genomes:" ,nrow(clust_win)))+
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0); ref_db_comp_plt
ref_db_comp_plt<- clust_win %>% group_by(genus) %>%
dplyr::summarise(genus_n=length(genus)) %>%
ggplot(aes(x="", y=genus_n, fill=factor(genus, levels = levs)))+
geom_bar(stat="identity", width=1) +
ggtitle("reference database composition")+
labs(subtitle = paste("number of genomes:" ,nrow(clust_win)))+
scale_fill_manual(values=cols, name="Genus")+
theme_void()+
coord_polar("y", start=0); ref_db_comp_plt
ggsave(paste(fig_dir, "/Ref_DB_composition.svg", sep=""),  ref_db_comp_plt, units ="mm", width = 297, height = 210, dpi=300)
fig_dir<- "../../../Figures/ReferenceDatabase"
dir.create(fig_dir, showWarnings = FALSE)
ggsave(paste(fig_dir, "/Ref_DB_composition.svg", sep=""),  ref_db_comp_plt, units ="mm", width = 297, height = 210, dpi=300)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(tidyverse)
library(RColorBrewer)
library(dendextend)
library(gtools)
library(ggrepel)
source("../useful_func.R")
library(MASS)
library(pals)
fig_p<- "../../../Figures/"
clust<- read.csv("../../../results/reference_db/data_tables/Cdb.csv", header=T, sep=",") %>% filter(grepl("MAG", genome))
clust_p<- "../../../results/reference_db_filtered/summary_data_tables/clust_filtered_winners.tsv"
clust<- read.csv(clust_p, header=T, sep="\t") %>%
group_by(species)%>%
dplyr::mutate(genus=unlist(strsplit(species, split=" "))[1])
mapping_info<- read.csv("../../../results/inStrain/B/data_tables/all_mapping_info.tsv", header=T, sep="\t")%>%
filter(scaffold=="all_scaffolds")
colnames(mapping_info)
id_vars<- c("unfiltered_pairs", "pass_pairing_filter", "pass_min_mapq", "pass_min_insert", "pass_max_insert",
"pass_min_read_ani",  "filtered_pairs")
cols<- brewer.pal(length(id_vars),"Set2")
mapping_info_m<- melt(mapping_info) %>% filter(variable %in% id_vars) %>% group_by(sample) %>%
arrange( desc(value), by_group=T)
unique(mapping_info_m$variable)
mapping_filtering_plt<- ggplot(mapping_info_m, aes(x=factor(sample, levels = mixedsort(unique(sample))), y=value, fill=factor(variable, levels = id_vars)))+
geom_bar(stat="identity", position = position_dodge())+
scale_fill_manual(values=cols)+
labs(fill="", x="", y="# reads")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "top"); mapping_filtering_plt
genome_info<-  read.csv("../../../results/inStrain/B/data_tables/all_genome_info.tsv", header=T, sep="\t") %>%
mutate("id"= get_mtdata(mtdata_path="../../../results/reference_db_filtered/summary_data_tables/clust_filtered_winners.tsv",
"id", corr="genome", genome))%>%
relocate(species, .after = genome) %>%
relocate(genus, .after = species) %>%
relocate(id, .after = genus)
genome_info_filt <- genome_info %>% filter(coverage_median>=5 & breadth >= 0.5) %>%
group_by(sample) %>%
mutate("frequency"=filtered_read_pair_count/sum(filtered_read_pair_count)) %>%
relocate(frequency, .before = coverage) %>%
group_by(sample, genus) %>%
mutate(freq_inG=coverage/sum(coverage))
th=0.01
levs<- get_gen_col(genome_info_filt$genus, rel_ab = genome_info_filt$frequency, threshold = th)[[1]]
cols<-  get_gen_col(genome_info_filt$genus, rel_ab = genome_info_filt$frequency, threshold = th)[[2]]
genera_relab_plt<- genome_info_filt %>% mutate(tax_plt=ifelse(frequency>th, genus, paste("other<", th,"%", sep=""))) %>%
ggplot(aes(x=factor(sample, levels=mixedsort(unique(sample))), y=frequency, fill=factor(tax_plt, levels=levs)))+
geom_bar(stat = "identity", position = "stack",color = "black" , size = 0.2)+
scale_fill_manual(values=cols)+
labs(x="", y="relative Frequency", fill="")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)); genera_relab_plt
to_remove<- c("Commensalibacter", "Frischella", "Bombella")
core_cols<- get_core_cols()
gerate_gradient<- function(col, nr,id){
fc<- brewer.pal(nr, "Spectral")
return(fc[id])
}
genome_plt<- genome_info_filt %>% filter(genus %in% get_core(), !genus %in% to_remove, !sample=="37B") %>%
dplyr::mutate(genus_cols=unname(get_core_cols()[genus])) %>% group_by(genus)%>% ungroup() %>%
dplyr::mutate(sp_cols=get_species_cols(id)[id])
my_pal<- genome_plt %>% pull(sp_cols)
levs<- sort(unique(names(my_pal)))
put_sp_prop_plt<- ggplot(genome_plt, aes(x=factor(sample, levels=mixedsort(unique(sample))), y=freq_inG, fill=id))+
geom_bar(stat = "identity", position = "stack", color = "black" , size = 0.2)+
scale_fill_manual(values=my_pal, breaks = levs)+
theme_classic()+
facet_wrap(.~genus)+
labs(fill="", x="", y="Relative Frequency within Genus")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size =5, face="bold"), legend.position="top",
legend.text = element_text(size=10,
face="bold")); put_sp_prop_plt
find_genome<- function(row){
gene<- unlist(strsplit(row[2], split=";"))
df<- data.frame("gene"= gene)
return(df)
}
format_motupan_file<- function(file, sk){
print(file)
df<- read.csv(file, skip=sk, header=T, sep="\t") %>%
filter(type=="core", mean_copy_per_genome==1) %>%
dplyr::select(genomes, genes)
formatted_df<- do.call(rbind, apply(df, 1, find_genome))
return(formatted_df)
}
stb<- read.csv("../../../results/reference_db_filtered/all_genomes/all_bacterial_RefGenomes.stb", header=F, sep="\t")
colnames(stb)<- c("scaffold", "genome")
all_genes_df<- fread("../../../results/inStrain/B/data_tables/all_gene_info.tsv") %>% left_join(., stb, by="scaffold") %>%
mutate("species"=get_mtdata(mtdata_path=clust_p, "species", corr="genome", genome),
"genus"= get_mtdata(mtdata_path=clust_p, "genus", corr="genome", genome),
"id"=get_mtdata(mtdata_path=clust_p, "id", corr="genome", genome),
"secondary_cluster"=get_mtdata(mtdata_path=clust_p, "secondary_cluster", corr="genome", genome),
"secondary_cluster_n"=get_mtdata(mtdata_path=clust_p, "secondary_cluster_n", corr="genome", genome))
gene_to_genome<- setNames(all_genes_df$genome, all_genes_df$gene)
gene_to_genome<- gene_to_genome[unique(names(gene_to_genome))]
motupan_dir<- "../../../results/pangenomes/B/"
motupan_files<-list.files(motupan_dir, pattern = "_mOTUpan.tsv$", recursive = TRUE, full.names = T)
clust_filt_p<- "../../../results/reference_db_filtered/summary_data_tables/clust_filtered.tsv"
motupan_df<-do.call(rbind, lapply(motupan_files,function(x) format_motupan_file(x, sk=16)))%>%
mutate(genome=gene_to_genome[gene]) %>% drop_na() %>%
mutate("species"= get_mtdata(mtdata_path=clust_filt_p, "species", corr="genome", genome),
"genus"= get_mtdata(mtdata_path=clust_filt_p, "genus", corr="genome", genome),
"id"=get_mtdata(mtdata_path=clust_filt_p, "id", corr="genome", genome),
"secondary_cluster"=get_mtdata(mtdata_path=clust_filt_p, "secondary_cluster", corr="genome", genome),
"secondary_cluster_n"=get_mtdata(mtdata_path=clust_p, "secondary_cluster_n", corr="genome", genome))
rownames(motupan_df)<- 1:nrow(motupan_df)
sog_isolates_p<- "../../../results/pangenomes/B/all_isolates_single_copy_OGs.tsv"
sog_genomes_p<- "../../../results/pangenomes/B/all_single_copy_OGs.tsv"
sog_genomes<- read.csv(sog_genomes_p, header = T, sep="\t")
sog_isolates<- read.csv(sog_isolates_p, header = T, sep="\t") %>%
mutate("species"= get_mtdata(mtdata_path=clust_filt_p, "species", corr="Bin.Id", genome),
"genus"= get_mtdata(mtdata_path=clust_filt_p, "genus", corr="Bin.Id", genome),
"og_tax"=paste(Orthogroup, genus, sep="-")) %>%
group_by(genus)%>%
mutate(nr_genomes=length(unique(genome))) %>% group_by(genus, Orthogroup) %>%
mutate(og_prevalence=length(genome))
sog_isolates_core<- sog_isolates %>% filter(og_prevalence==nr_genomes)
all_core<- sog_genomes %>%
mutate("og_tax"=paste(Orthogroup, genus, sep="-")) %>%
filter((og_tax %in% sog_isolates_core$og_tax)) %>%
mutate("id"= get_mtdata(mtdata_path=clust_filt_p, "id", corr="Bin.Id", genome))
motupan_df %>% filter(id %in% genome_info_filt$id) %>%
group_by(genus,id) %>%
summarise(n_core=length(gene)) %>%
ggplot(aes(x=id, y=n_core, fill=genus)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = seq(0, 1500, by=100))+
scale_fill_manual(values=get_core_cols())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all_core %>% filter(Bin_Id %in% unique(clust$Bin.Id), id %in% genome_info_filt$id)%>%
group_by(id) %>%
dplyr::summarise(n_core=length(gene),
genus=unique(genus)) %>%
ggplot(aes(x=id, y=n_core, fill=genus)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = seq(0, 1800, by=100))+
scale_fill_manual(values=get_core_cols())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Get a list of core genes according to the two different tools
core_genes_motupan<- unique(motupan_df$gene)
core_genes_ogf<- unique(all_core$gene)
# get a list of id and the samples where they are found
sam_id <- genome_info_filt %>% mutate(sam_ids=paste(sample, id, sep="-")) %>% pull(sam_ids)
sam_id <- unique(sam_id)
# Update the gene file by adding info on core and accessory plus filtering for ids that are found in the sample
all_genes_df<- all_genes_df %>% filter(genus %in% get_core()) %>%
mutate(type_motupan=ifelse(gene %in% core_genes_motupan, "core", "accessory"),
type_ogf=ifelse(gene %in% core_genes_ogf, "core", "accessory"),
sam_ids=paste(sample, id, sep="-"))
all_genes_df_filt<- all_genes_df %>%
filter(sam_ids %in% sam_id) %>%
mutate(origin=ifelse(as.numeric(gsub("B", "", sample))>55, "Japan", "Switzerland"))
library(ggvenn)
venn_core_set<- list(
mOTUpan=core_genes_motupan,
Orthofiner=core_genes_ogf
)
ggvenn(venn_core_set)
core_vs_acc_plt<- all_genes_df_filt %>% filter(coverage>=5, !genus=="Bombella") %>% melt(measure.vars=c("type_motupan", "type_ogf"), variable.name="tool")%>%
group_by(genus, sample, tool, id) %>%
summarise(core=sum(value=="core"),
acccessory=sum(value=="accessory"))%>%
melt(measure.vars=c("core", "acccessory")) %>% group_by(genus, id, variable, tool) %>%
summarise(SD=sd(value),me=mean(value)) %>%
group_by(id, tool) %>%
mutate(newy=cumsum(me)) %>%
ggplot(aes(x=id, y=me, fill=variable))+
facet_grid(tool~genus, scales = "free_x")+
geom_bar(stat="identity", position = position_stack(reverse = TRUE))+
geom_errorbar(aes(ymin = newy-SD, ymax = newy+SD), width = 0.3, position = "identity")+
scale_y_continuous(breaks = seq(0,3000, 200))+
scale_fill_manual(values=c("black", "gray"))+
labs(x="", y="Gene Count", fill="")+
theme_classic()+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust=1, size=5, face="bold")); core_vs_acc_plt
core_vs_acc_plt<- all_genes_df_filt %>% filter(coverage>=5, !genus=="Bombella") %>% melt(measure.vars=c("type_motupan", "type_ogf"), variable.name="tool")%>%
group_by(genus, sample, tool, id) %>%
summarise(core=sum(value=="core"),
acccessory=sum(value=="accessory"))%>%
melt(measure.vars=c("core", "acccessory")) %>% group_by(genus, id, variable, tool) %>%
summarise(SD=sd(value),me=mean(value)) %>%
group_by(id, tool) %>%
mutate(newy=cumsum(me)) %>%
ggplot(aes(x=id, y=me, fill=variable))+
facet_grid(tool~genus, scales = "free_x")+
geom_bar(stat="identity", position = position_stack(reverse = TRUE))+
geom_errorbar(aes(ymin = newy-SD, ymax = newy+SD), width = 0.3, position = "identity")+
scale_y_continuous(breaks = seq(0,3000, 200))+
scale_fill_manual(values=c("black", "gray"))+
labs(x="", y="Gene Count", fill="")+
theme_classic()+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust=1, size=10, face="bold")); core_vs_acc_plt
core_vs_acc_plt<- all_genes_df_filt %>% filter(coverage>=5, !genus=="Bombella") %>% melt(measure.vars=c("type_motupan", "type_ogf"), variable.name="tool")%>%
group_by(genus, sample, tool, id) %>%
summarise(core=sum(value=="core"),
acccessory=sum(value=="accessory"))%>%
melt(measure.vars=c("core", "acccessory")) %>% group_by(genus, id, variable, tool) %>%
summarise(SD=sd(value),me=mean(value)) %>%
group_by(id, tool) %>%
mutate(newy=cumsum(me)) %>%
ggplot(aes(x=id, y=me, fill=variable))+
facet_grid(tool~genus, scales = "free_x")+
geom_bar(stat="identity", position = position_stack(reverse = TRUE))+
geom_errorbar(aes(ymin = newy-SD, ymax = newy+SD), width = 0.3, position = "identity")+
scale_y_continuous(breaks = seq(0,3000, 200))+
scale_fill_manual(values=c("black", "gray"))+
labs(x="", y="Gene Count", fill="")+
theme_classic()+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust=1, size=10, face="bold")); core_vs_acc_plt
ggsave(paste(fig_dir, "/core_vs_accessory.svg", sep=""),  core_vs_acc_plt, units ="mm", width = 297, height = 210, dpi=300)
core_vs_acc_plt
ggsave(paste(fig_dir, "/core_vs_accessory.svg", sep=""),  core_vs_acc_plt, units ="mm", width = 297, height = 210, dpi=300)
